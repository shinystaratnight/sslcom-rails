# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /\A(.*) within ([^:]+)\z/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /\A(.*) within ([^:]+):\z/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /\A(?:|I )am on (.+)\z/ do |page_name|
  visit path_to(page_name)
end

When /\A(?:|I )go to (?!route path) (.+)\z/ do |page_name|
  visit path_to(page_name)
end

When /\A(?:|I )press "([^"]*)"\z/ do |button|
  click_button(button)
end

When /\A(?:|I )follow "([^"]*)"\z/ do |link|
  click_link(link)
end

When /\A(?:|I )fill in "([^"]*)" with "([^"]*)"\z/ do |field, value|
  fill_in(field, :with => value)
end

When /\A(?:|I )fill in "([^"]*)" for "([^"]*)"\z/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /\A(?:|I )fill in the following:\z/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /\A(?:|I )select "([^"]*)" from "([^"]*)"\z/ do |value, field|
  select(value, :from => field)
end

When /\A(?:|I )check "([^"]*)"\z/ do |field|
  check(field)
end

When /\A(?:|I )uncheck "([^"]*)"\z/ do |field|
  uncheck(field)
end

When /\A(?:|I )choose "([^"]*)"\z/ do |field|
  choose(field)
end

When /\A(?:|I )attach the file "([^"]*)" to "([^"]*)"\z/ do |path, field|
  attach_file(field, File.expand_path(path))
end

#Then /\A(?:|I )should see "([^"]*)"\z/ do |text|
#  if page.respond_to? :should
#    page.should have_content(text)
#  else
#    assert page.has_content?(text)
#  end
#end

Then /\A(?:|I )should see \/([^\/]*)\/\z/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /\A(?:|I )should not see "([^"]*)"\z/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /\A(?:|I )should not see \/([^\/]*)\/\z/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /\Athe "([^"]*)" field(?: within (.*))? should contain "([^"]*)"\z/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /\Athe "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"\z/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /\Athe "([^"]*)" checkbox(?: within (.*))? should be checked\z/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /\Athe "([^"]*)" checkbox(?: within (.*))? should not be checked\z/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /\A(?:|I )should be on (.+)\z/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /\A(?:|I )should have the following query string:\z/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /\Ashow me the page\z/ do
  save_and_open_page
end
