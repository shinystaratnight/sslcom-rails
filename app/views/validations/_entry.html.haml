-@cert_order = co
-cc = co.certificate_content
-cn = cc.csr.common_name
-v = co.validation
%tr.expanded(class="#{'hidden' if current_page?(:validations)}")
  %td(colspan="6")
    .certificate_details
      =render :partial=>'/certificate_orders/menu', :locals=>{:co=>co}
      =render :partial=>'/certificate_orders/co', :object=>co
      %table(cellspacing="0")
        %tbody
          %tr
            %td(colspan="6")
              .certificate_details_box
                %ul
                  #validation_requirements_box
                    %li
                      %strong validation requirements
                      -if !co.certificate_content.has_all_contacts?
                        %li
                          %span.rule_name contacts
                          %ul
                            %li.rules_methods_block
                              %em
                                status:
                              %ul
                                %li
                                  %span.validation_attention contacts are required but are missing
                      -elsif current_user.try("is_admin?")
                        %li.rules_methods_block(class="admin_approve_#{i}" style='color:red')
                          =form_for v, :html=>{:alt=>"#{i}", :class=>'edit_validation_ruling'} do |f|
                            =hidden_field_tag 'certificate_order', co.id
                            %em
                              admin only:
                            -v.validation_rules.each_with_index do |vr, vri|
                              -vrl = v.validation_rulings.detect do |vrl| vrl.validation_rule == vr end
                              %ul
                                %li
                                  for requirement:
                                  %span.rule_name
                                    #{vr.description}
                              %ul
                                %li
                                  #{radio_button_tag "ruling_decision_#{vrl.id}", ValidationRuling::APPROVED, nil, :alt=>"#{vrl.id}"}approve
                                %li
                                  #{radio_button_tag "ruling_decision_#{vrl.id}", ValidationRuling::UNAPPROVED, nil, :alt=>"#{vrl.id}"}unapprove
                                %li
                                  #{radio_button_tag "ruling_decision_#{vrl.id}", ValidationRuling::MORE_REQUIRED, nil, :alt=>"#{vrl.id}"}more required
                              %ul(class="reason_block_#{vrl.id}" style="display: none")
                                %li
                                  %em
                                    reason:
                                  %ul
                                    %li=text_area_tag "ruling_reason_#{vrl.id}"
                            %ul
                              %li.email_customer
                                #{check_box_tag "email_customer", true, :alt=>"#{i}"}notify customer?
                              %li.approve_submit=submit_tag 'submit'
                    -v.validation_rules.each_with_index do |vr, vri|
                      -is_domain_validation = vr.description=~/^domain/
                      %li.validation_section
                        %span.rule_name=vr.description
                        %ul
                          -vrl = v.validation_rulings.detect do |vrl| vrl.validation_rule == vr end
                          -status, status_class = validation_status(vrl)
                          -status = status.gsub("documents", "user reponse") if is_domain_validation
                          %li.rules_methods_block
                            %em
                              status:
                            %ul
                              %li
                                %span(class="validation_status_result_#{vrl.id} #{status_class} #{vr.description.gsub(" ", "_")}_#{i}") #{status}
                            %ul.applied_docs(class="applied_docs_summary_#{i}")
                              -v.validation_histories.applied_to(vr).each do |vh|
                                -name = vh.document_file_name.shorten(20, false)
                                %li.applied_doc.approved_validation_document(alt="#{name}_#{i}_#{vh.id}")
                                  applied: #{name}
                          -unless is_domain_validation
                            %li.rules_methods_block
                              %em status history:
                              %ul(class="status_history_#{vrl.id}" alt="#{vrl.id}")
                                -unless vrl.notes.empty?
                                  -vrl.notes.last(5).each do |note|
                                    %li
                                      %em
                                        #{note.title} by #{note.user.login}:
                                      %ul
                                        %li
                                          #{note.note} - #{note.created_at.strftime("%b %d, %Y")}
                                -else
                                  %li(class="no_validation_decisions_#{vrl.id}")
                                    %em none
                            %li.rules_methods_block
                              %em applicable documents:
                              %ul.applicable_documents
                                -methods=v.validation_histories.applied_to(vr).flatten.map(&:satisfies_validation_methods).flatten.uniq
                                -vr.applicable_validation_methods.each do |vm|
                                  -approved=methods.include?(vm) ? 'approved_validation_document crossout' : ''
                                  %li(class="method_#{i} #{approved} rule_#{vr.id}" alt="method_#{vm}_#{i}")
                                    %span=vm
                                    %ul
                                      -v.validation_histories.applied_to(vr).each do |vh|
                                        -if !vh.satisfies_validation_methods.blank? && vh.satisfies_validation_methods.include?(vm)
                                          -name = vh.document_file_name.shorten(20, false)
                                          %li.applied_doc.tree-connect(alt="#{name}_#{i}_#{vh.id}")
                                            applied: #{name}
                          =render partial: 'validations/dcv', locals: {co: co}
                  -if current_user.try("is_admin?")
                    %li
                      %strong API Reprocess Command
                    %li
                      %textarea.selectAll=co.to_api_string2("update")
                    %li
                      %strong Comodo API New Command
                    %li
                      %textarea.selectAll='curl -k -H "Accept: application/json" -H "Content-type: application/json" -X POST -d "'+co.options_for_ca(new: true, ca_certificate_id: "506", product: "301").merge(ComodoApi::CREDENTIALS).map{|k,v|"#{k}=#{v}"}.join("&").gsub('"', '\"')+'" \''+ComodoApi::APPLY_SSL_URL+'\''
                    -if co.external_order_number
                      %li
                        %strong Comodo API Rekey Command
                      %li
                        %textarea.selectAll='curl -k -H "Accept: application/json" -H "Content-type: application/json" -X POST -d "'+co.options_for_ca.merge(ComodoApi::CREDENTIALS).map{|k,v|"#{k}=#{v}"}.join("&").gsub('"', '\"')+'" \''+ComodoApi::REPLACE_SSL_URL+'\''
                    %li product:
                    %ul
                      %li
                        %dl
                          %dt
                          %dd "342" - free 90 day
                          %dd "301" - basicssl
                          %dd "343" - wildcard
                          %dd "337" - ev
                          %dd
                          %dd "279" - ucc
                          %dd "279" - premiumssl
                          %dd "310" - evucc
                    %li caCertificateID:
                    %ul
                      %li
                        SHA2
                        %dl
                          %dt
                          %dd "508" - ev
                          %dd "507" - ov
                          %dd "506" - dv
                      %li
                        SSL.com Free CA
                        %dl
                          %dt
                          %dd "403" - ev
                          %dd "402" - ov
                          %dd "401" - dv
              .certificate_details_box
                %ul
                  %li
                    %strong(class="val_docs_list_#{i}" alt="#{v.validation_histories.count}") validation documents
                  -if co.validation.validation_histories.empty?
                    -if co.is_express_validation? || co.validation_rules_satisfied?
                      %li
                        %em none required
                    -else
                      %li
                        %em none submitted
                      %li
                        =link_to image_tag('upload_med.jpg', :style=>'vertical-align:middle')+"UPLOAD DOCUMENT(S)", new_certificate_order_validation_url(co)
                  -else
                    -co.validation.validation_histories.each_with_index do |h, hi|
                      .validation_history
                        %li
                          =link_to image_tag('preview.png', :class=>'blue_icon'), h.document_url(:preview), :rel=>'prettyPhoto'
                          =link_to image_tag('download.png', :class=>'blue_icon'), h.document_url
                          %span.doc_filename(alt="#{h.document_file_name}")=link_to h.document_file_name.shorten(20,false), edit_certificate_order_validation_url(co)
                          -unless current_user.try("is_admin?") || h.satisfies_validation_methods.blank?
                            -methods=h.satisfies_validation_methods.split(", ")
                            %dl
                              %dt document type:
                              -methods.each do |m|
                                %dd=m
                          -if current_user.try("is_admin?")
                            =form_for h do |f|
                              .validation_admin_controls
                                =hidden_field_tag :validation, co.validation.id
                                .validation_setting
                                  %dt
                                    %em.clearfix satisfies requirements (hold ctrl button while clicking choices to select multiple requirements)
                                  %dd
                                    -o=[Validation::NONE_SELECTED]+co.validation.validation_rules.collect {|r| [r.description, r.id] }.sort{|x,y|x[0]<=>y[0]}
                                    -selected = h.validation_rules.map(&:id).empty? ? [Validation::NONE_SELECTED] : h.validation_rules.map(&:id)
                                    =f.select :validation_rules, options_for_select(o, selected),{}, {:multiple=>true, :size=>3, :alt=>"#{i}_#{h.id}"}
                                .validation_setting
                                  %dt
                                    %em.clearfix document type (hold ctrl button while clicking choices to select multiple requirements)
                                  %dd
                                    -o=[Validation::NONE_SELECTED]+co.validation_methods.collect {|m| [m, m] }.sort
                                    -selected = h.satisfies_validation_methods.blank? ? [Validation::NONE_SELECTED] : h.satisfies_validation_methods
                                    =f.select :satisfies_validation_methods, options_for_select(o, selected),{}, {:multiple=>true, :size=>3, :alt=>"#{i}_#{h.id}"}
                    %li
                      =link_to 'manage', edit_certificate_order_validation_url(co)
                      -unless co.validation_rules_satisfied?
                        |
                        =link_to 'upload', new_certificate_order_validation_url(co)
              .certificate_details_box
                %ul
                  -if cn
                    =render partial: 'certificate_orders/visit', locals: {cn: cn}
                  =render partial: 'shared/small_admin_functions', locals: {co: co}
                -if current_user.try("is_admin?")
                  %ul#send_to_ca_box
                    %li
                      %strong
                        process certificate signing request
                    %li=link_to 'send to ca', send_to_ca_certificate_order_validation_url(co), remote: true, id: "send_to_ca", "data-type"=>"json"
                    %li
                      #processing_ca
                        =image_tag 'waiting_bar_medium.gif'
                        %span processing...
                      %dl#sent_to_ca_results
                        =render partial: "sent_ca_result", collection: co.csr_ca_api_requests.compact.flatten, as: :ca_response
                        =render partial: "cert_ca_result", locals: {ca_response: co.ca_retrieve_certificates.first} unless co.ca_retrieve_certificates.blank?
                  %ul
                    %li
                      %strong notes
                    %li.category_border
                      -unless co.notes.blank?
                        =co.notes
                      -else
                        no notes found

