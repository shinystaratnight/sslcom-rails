-content_for :title, "Validation for #{@certificate_order.ref}"
-co = @certificate_order
-checkout_in_progress=co.validation_stage_checkout_in_progress?
-if checkout_in_progress
  -i=adjusted_position(5, co)
  =order_progress_indicator(i, co.certificate)
%h3
  Validation #{'Documentation' unless checkout_in_progress} for
  -if other_party_request(@certificate_order)
    Certificate Order ##{@certificate_order.ref}
  -else
    =link_to "Certificate Order ##{@certificate_order.ref}", certificate_order_path(@ssl_slug, @certificate_order)
  =error_messages_for :validation, :dcv, :other_party_validation_request
-if true #co.certificate.is_ucc?
  .error{style: "display: none;"}
  %h2 Domain Validation
  %h3
    Please select the appropriate validation option for each domain and then click the 'Validate' button.
    Only after you click 'Validate' will the actual validation be performed. You can also
    =link_to "invite", new_managed_user_path({ssl_slug: @ssl_slug})
    another user to complete the validation step.
    =link_to "How do I use this page?", Settings.dv_explanation_link, target: "_blank"
  -if co.certificate.is_single?
    %h3
      Please generate a new CSR with the correct common name value and submit the new CSR here {Edit button}
  %table{style: "width: 100%; border: 1px solid black; padding: 1em"}
    %tr
      %th(colspan="2") validation hashes
    %tr
      %td file
      %td=link_to "click here to download file #{co.csr.md5_hash}.txt", http_dcv_file_csr_path(@ssl_slug, co.csr)
    %tr
      %td cname
      %td create CNAME in dns and point to #{co.csr.dns_sha2_hash}.comodoca.com
    %tr
      %td md5 hash
      %td.md5_hash=co.csr.md5_hash
    %tr
      %td sha2 hash
      %td.sha2_hash=co.csr.sha2_hash
    %tr
      %td cname md5 hash
      %td.dns_md5_hash=co.csr.dns_md5_hash
    %tr
      %td cname sha2 hash
      %td.dns_sha2_hash=co.csr.dns_sha2_hash
    -unless co.csr.unique_value.blank?
      %tr
        %td unique value*
        %td.unique_value=co.csr.unique_value
      %tr
        %td(colspan="2") (* Any domain name removals or edits will require updating the unique value after clicking the Validate button.)
  -#-cnIdStr = ''
  -#-cnNameStr = ''
  -#-co.certificate_content.certificate_names.pluck(:name).uniq.each do |cn|
  -#  -cnNameStr = cnNameStr + ',' + cn if !cn.nil? && !cn.empty?
  -#  -cnIdStr = cnIdStr + co.certificate_content.certificate_names.find_by_name(cn).id.to_s + ','
  -#=hidden_field_tag :cert_names_ids_str, cnIdStr
  -#=hidden_field_tag :ori_domain_names_str, cnNameStr
  =hidden_field_tag :ori_domain_names_str, co.certificate_content.certificate_names.pluck(:name).uniq.join(',')
  =form_tag('', method: :post, class: :api_certificate_request) do
    =hidden_field_tag :account_key, current_user.ssl_account.api_credential.account_key
    =hidden_field_tag :secret_key, current_user.ssl_account.api_credential.secret_key
    -if co.certificate.is_evucc? || co.certificate.is_premium_ssl? || co.certificate.is_ucc?
      -opts=[["Delete","delete"], ["Use http csr hash validation","http_csr_hash"], ["Use https csr hash validation","https_csr_hash"], ["Use cname csr hash validation","cname_csr_hash"]]
    -else
      -opts=[["Use http csr hash validation","http_csr_hash"], ["Use https csr hash validation","https_csr_hash"], ["Use cname csr hash validation","cname_csr_hash"]]
    .domains_loader_wrap
      .domains_loader
    %table#domains_validation
      %thead
        %th
          =check_box_tag "select_all", nil, false, {id: "select_all"}
          =select_tag("validation_common_type", options_for_select(opts),prompt: 'Please select a validation method')
        %th domain
        %th options
        -#%th description
        -if Settings.enable_caa
          %th CAA
        %th pre-test
        %th previous attempt
        %th attempted on
        %th status
      %tbody.domain_list{'data-ref' => co.certificate_content.ref}
    #upload_validations(style='width: 100%; text-align: center; display: none;')
      =submit_tag "Validate", :id=>"validate_domains", :disable_with=>"Submitting..."
      .clearfix
        =image_tag('waiting_bar_medium.gif', :id=>'waiting_bar', :style=>'display: none; vertical-align: middle;')
-else
  #stylized.default_form
    =form_tag(upload_certificate_order_validation_path(co.ref),{ :multipart => true}) do
      -if checkout_in_progress
        -unless co.certificate.is_dv?
          =render partial: 'refer_to_others', locals: {co: co, hide_options: !checkout_in_progress}
        =render partial: 'proof_of_dcv', locals: {co: co}
        -unless (co.certificate.is_dv_or_basic? && checkout_in_progress)
          #documents_upload_heading
            .subheading Documentation
            .clearfix
              %label{:for=>"skip_validation"}
                *Validation documents:
                %span.label_desc you can skip this step for now
              .radio_choices
                .radio_w_desc.clearfix
                  =radio_button_tag :has_documents, true
                  %span.has_csr_container I have my documents ready and want to upload them now
                .radio_w_desc.clearfix
                  =radio_button_tag :has_documents, false
                  %span.has_csr_container I want to upload documents later
      -unless (co.certificate.is_dv_or_basic? && checkout_in_progress)
        #documents_upload_section
          #documents_upload_instructions
            %h2 Documents
            -if co.certificate.is_ev?
              %p
                #{Settings.community_name} will verify the existence of your business, the ownership of the domain(s)
                #{co.all_domains.join(", ")}, and your employment status or authority to
                request the SSL Certificate for #{co.all_domains.join(", ")}. The following documents are required:
                %dl.listing
                  %dd
                    %ul
                      %li
                        %dt Full EV Authorization Form (#{link_to "click here to download form #{image_tag('pdf_icon.gif')}".html_safe, "https://support.ssl.com/index.php?_m=downloads&_a=downloadfile&downloaditemid=4"})
                        %dd This form of the EV Request should be used when more than one individual are acting in the roles of Certificate Requester, Certificate Approver and Contract (Subscriber Agreement) Signer.)
                      %li
                        %dt Simplified EV Authorization Form (#{link_to "click here to download form #{image_tag('pdf_icon.gif')}".html_safe, "https://support.ssl.com/index.php?_m=downloads&_a=downloadfile&downloaditemid=5"})
                        %dd This form should be used if one person is to act in all three roles, Certificate Requester, Certificate Approver and Contract (Subscriber Agreement) Signer.
            -else
              %p
                If documents are required for this order, then #{Settings.community_name} will verify the existence of your business, the ownership of the domain(s)
                #{co.all_domains.join(", ")}, and your employment status or authority to
                request the SSL Certificate for #{co.all_domains.join(", ")}. Documents required from the registrant listed
                on this whois record for #{co.subject} may include:
              -co.validation.validation_rules.sort{|a,b|a.id<=>b.id}.each do |vr|
                -unless vr.description =~ /domain/
                  %dl.listing
                    -case vr.description
                    -when /organization/
                      %dt
                        Any of the following official government documentation proving your right to do
                        business:
                      %dd
                        %ul
                          -vr.applicable_validation_methods.each do |m|
                            %li=m
                    -when /ev/
                      %dt.ev_instructions
                        In addition to the above documentation, extended validation certificates require an
                        authorization form signed by an authorized representative for #{co.subject}.
                        Please fill out any of the forms below and submit it to complete the extended
                        validation portion of this order:
                      %dd
                        %ul
                          %li
                            %dt Full EV Authorization Form (#{link_to "click here to download form #{image_tag('pdf_icon.gif')}".html_safe, "https://support.ssl.com/index.php?_m=downloads&_a=downloadfile&downloaditemid=4"})
                            %dd This form of the EV Request should be used when more than one individual are acting in the roles of Certificate Requester, Certificate Approver and Contract (Subscriber Agreement) Signer.)
                          %li
                            %dt Simplified EV Authorization Form (#{link_to "click here to download form #{image_tag('pdf_icon.gif')}".html_safe, "https://support.ssl.com/index.php?_m=downloads&_a=downloadfile&downloaditemid=5"})
                            %dd This form should be used if one person is to act in all three roles, Certificate Requester, Certificate Approver and Contract (Subscriber Agreement) Signer.
            %p
              Up to 5 files can be uploaded. Zipped documents can also be uploaded, and
              they will automatically be unpacked. The following file types are accepted:
              #{ValidationHistory.acceptable_file_types}
          =file_field_tag "filedata[]", :id=> "multi_upload"
      #upload_validations(style='width: 100%; text-align: center;')
        -if checkout_in_progress
          %input(type="button" class="shiny_blue_button" id="start_over" value="Cancel")
        =submit_tag "Submit", :id=>"upload_files", :disable_with=>"Submitting..."
        .clearfix
          =image_tag('waiting_bar_medium.gif', :id=>'waiting_bar', :style=>'display: none; vertical-align: middle;')
      #button_container(style='display : none')
        #skip_button=link_to image_tag("skip_bl.gif"), co
=render :partial => 'index_scripts'
%script{:type=>"text/javascript"}
  :plain
    //# PLUGIN INTEGRATION
    jQuery(function($){
      $('#multi_upload').MultiFile({
        max: 5,
        accept: '#{ValidationHistory.multi_upload_types}',
        STRING:{
        remove: '#{image_tag('minus.gif')}'},
        afterFileSelect:function(element,value,master){
       }
      });
      $('#upload_files').click(function(){
        $('#waiting_bar').show();
      });
    });
