<%checkout_in_progress=@certificate_order && @certificate_order.validation_stage_checkout_in_progress?%>
<script type="text/javascript">
jQuery(function($) {
  //This prototype is provided by the Mozilla foundation and
  //is distributed under the MIT license.
  //http://www.ibiblio.org/pub/Linux/LICENSES/mit.license

  if (!Array.prototype.every)
  {
    Array.prototype.every = function(fun /*, thisp*/)
    {
      var len = this.length;
      if (typeof fun != "function")
        throw new TypeError();

      var thisp = arguments[1];
      for (var i = 0; i < len; i++)
      {
        if (i in this &&
            !fun.call(thisp, this[i], i, this))
          return false;
      }

      return true;
    };
  }

  //This prototype is provided by the Mozilla foundation and
  //is distributed under the MIT license.
  //http://www.ibiblio.org/pub/Linux/LICENSES/mit.license

  if (!Array.prototype.some)
  {
    Array.prototype.some = function(fun /*, thisp*/)
    {
      var len = this.length;
      if (typeof fun != "function")
        throw new TypeError();

      var thisp = arguments[1];
      for (var i = 0; i < len; i++)
      {
        if (i in this &&
            fun.call(thisp, this[i], i, this))
          return true;
      }

      return false;
    };
  }
  var is_approved=function(x){
    return x=='<%=ValidationRuling::APPROVED%>';
  }
  var is_unapproved=function(x){
    return x=='<%=ValidationRuling::UNAPPROVED%>';
  }
  var is_requiring_more=function(x){
    return x=='<%=ValidationRuling::MORE_REQUIRED%>';
  }
  $.get_selected_options=function(select, type){
    options=[];
    $(select).find(':selected').each(function(c, selected){
      if(type=='text')
        options[c] = $(selected).text();
      else
        options[c] = $(selected).val();
    });
    return options;
  }
  $.get_selected_array_options=function(select, index, type){
    options=[];
    $($(select)[index]).find(':selected').each(function(c, selected){
      if(type=='text')
        options[c] = $(selected).text();
      else
        options[c] = $(selected).val();
    });
    return options;
  }
  $.method_none_selected=function(methods){
    for(m=0; m<methods.length; m++){
      if(methods[m]=='<%=Validation::NONE_SELECTED%>')
        return true;
    }
    return false;
  }
  $.unapprove_all_methods=function(methods, i){
    for(m=0; m<methods.length; m++){
      $('.method_'+i).removeClass("approved_validation_document")
        .removeClass('crossout');
      $('.method_'+i+' ul li').remove();
    }
  }
  $.method_type=function(){
    if($(':radio[name=method]:checked').val()=="http"){
      $('#http_dcv').show();
      $('#email_dcv').hide();
    }
    else{
      $('#http_dcv').hide();
      $('#email_dcv').show();
    }
    $(':radio[name=method]').bind('click', function(){
      if($(this).val()=="http"){
        $('#http_dcv').show();
        $('#email_dcv').hide();
      }
      else{
        $('#http_dcv').hide();
        $('#email_dcv').show();
      }
    });
  }
  jQuery.fn.refer_to_others_toggle=function(){
    if($(this).val()=="false"){
      $('#request_validation_from_others').hide();
      $('#proof_of_dcv_section').show();
      $('#documents_upload_section').show();
      $('#documents_upload_heading').show();
      if(<%=!checkout_in_progress%>)
        $("#upload_validations").show();
      $.method_type();
    }
    else{
      $('#request_validation_from_others').show();
      $(':radio[name*=preferred_sections][value=<%=OtherPartyValidationRequest::BOTH_SECTIONS%>]').attr("checked", "checked");
      $('#proof_of_dcv_section').hide();
      $('#documents_upload_section').hide();
      $('#documents_upload_heading').hide();
      if(<%=!checkout_in_progress%>)
        $("#upload_validations").hide();
    }
  }
  $(document).ready(function() {
    var status_bar=null;
    $.method_type();
    $("select#domain_control_validation_email option[value='none']").remove();
    $('input:checkbox#select_all').click(function(event) {  //on click
      $(".check_box").prop('checked', $(this).prop('checked'));
    });
    $('.dropdown, .validation_status_message, .expand, .subject_column > a').click(function(){
      if($(this).parents().filter('tr').next().css('display')!='none'){
        $(this).parents().filter('tr').next().css('display', 'none');
        $(this).parents().filter('tr').find('.dropdown img').attr('src',"<%= asset_path('expand.png') %>");
        $(this).parents().filter('tr').find('.expand').text('expand');
        this.expanded = false;
      }
      else{
        this.expanded = true;
        $(this).parents().filter('tr').find('.dropdown img').attr('src',"<%= asset_path('contract.png') %>");
        $(this).parents().filter('tr').next().show();
        $(this).parents().filter('tr').find('.expand').text('close');
      }
    });
    // prepare Options Object
    var options = {
        dataType: 'json',
        beforeSubmit: function(){
          return confirm(
          "This will adjust the approval status of this order. Are you sure?");
        },
        success: function(data, status, $form) {
          alt=$form.attr('alt');
          all_approvals=[];
          $form.find(':radio:checked').each(function(i){
            approval=$(this).val();
            all_approvals.push(approval);
            vrl_alt = $(this).attr('alt');
            reason = $("#ruling_reason_"+vrl_alt).val();
            $('ul.status_history_'+vrl_alt)
              .append('<li><em>'+approval+' by '+data.by_user+':</em><ul><li>'+
                reason+' - '+
                Date.parse('today').toString("MMM d, yyyy")+
                '</li></ul></li>');
            status_span=$('.validation_status_result_'+vrl_alt);
            if(approval=='<%=ValidationRuling::APPROVED%>'){
              status_span.text("<%=ValidationRuling::APPROVED%>");
              status_span
                .removeClass("<%=ValidationRuling::ATTENTION_CLASS%>")
                .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
                .addClass("<%=ValidationRuling::APPROVED_CLASS%>");
            }
            else if(approval=='<%=ValidationRuling::UNAPPROVED%>'){
              status_span.text("<%=ValidationRuling::UNAPPROVED%>");
              status_span
                .removeClass("<%=ValidationRuling::APPROVED_CLASS%>")
                .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
                .addClass("<%=ValidationRuling::ATTENTION_CLASS%>");
            }
            else if(approval=='<%=ValidationRuling::MORE_REQUIRED%>'){
              status_span.text("<%=ValidationRuling::INSUFFICIENT%>");
              status_span.removeClass("<%=ValidationRuling::APPROVED_CLASS%>")
                .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
                .addClass("<%=ValidationRuling::ATTENTION_CLASS%>");
            }
            $('.reason_block_'+alt).hide();
            $('.no_validation_decisions_'+vrl_alt).remove();
          });
          message_span=$('.vs_message_'+alt.split("_")[0]);
          if(all_approvals.some(is_requiring_more)){
            message_span.text("<%=ValidationRuling::MORE_REQUIRED_STATUS%>");
            message_span.removeClass("<%=ValidationRuling::APPROVED_CLASS%>")
              .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
              .addClass("<%=ValidationRuling::ATTENTION_CLASS%>");
          }
          else if(all_approvals.some(is_unapproved)){
            message_span.text("<%=ValidationRuling::UNAPPROVED_STATUS%>");
            message_span
              .removeClass("<%=ValidationRuling::APPROVED_CLASS%>")
              .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
              .addClass("<%=ValidationRuling::ATTENTION_CLASS%>");
          }
          else if(all_approvals.every(is_approved)){
            message_span.text("<%=ValidationRuling::APPROVED_STATUS%>");
            message_span
              .removeClass("<%=ValidationRuling::ATTENTION_CLASS%>")
              .removeClass("<%=ValidationRuling::WAITING_CLASS%>")
              .addClass("<%=ValidationRuling::APPROVED_CLASS%>");
          }
          alert('Approval status change successful!');
          $form.reset();
        }
    };
    $('form.edit_validation_ruling').ajaxForm(options);
    $('form.api_certificate_request').ajaxForm({
      dataType: "json",
      beforeSubmit: function(){
        confirmed = confirm('Proceed with validation?');
        if(confirmed){
          $('#waiting_bar').show();
        }
        return confirmed;
      },
      success: function(data, status){
//        $('#waiting_on_csr').hide();
//        $('.submit_csr').removeAttr('disabled');
//        $('.submit_csr').attr('value', submit_label);
          location.reload(true);
        if(data.errors){
          $('.error').html("The following fields have errors:</br><ul>");
          $.each(data.errors, function(i, item) {
            // i = index
            // item = data for a particular post
            $('.error').append("<li>"+i+": "+item.toString()+"</li>");
          });
          $('.error').append("</ul>").show();
        }
        else{
//          window.location.href = data.certificate_url;
//          alert("Validation updated.");
        }
      }
    });
    $('input:checkbox[name*=publish_to_site_seal]').click(function(){
      $(this).parents().filter('form').ajaxSubmit();
    });
    $(':radio[name^=ruling_decision]').click(function(){
      alt=$(this).attr('alt');
      if($(this).val()=='<%=ValidationRuling::UNAPPROVED%>' ||
          $(this).val()=='<%=ValidationRuling::MORE_REQUIRED%>'){
        $('.reason_block_'+alt).show();
      }
      else{
        $('.reason_block_'+alt).hide();
      }
    });
    $('.selectAll').toggle(function() {
      $(this).select();
    }, function() {
      $(this).unselect();
    });
    $('select[id*=validation_history_validation_rules]').change(function(){
      //prevent other options from being selected if None is selected
      rules = $.get_selected_options(this, 'text');
      if($.method_none_selected(rules)){
        $(this).find(':selected').each(function(c, selected){
          if($(selected).text()!='<%=Validation::NONE_SELECTED%>')
            $(selected).attr('selected', false);
        });
      }
      $(this).parents().filter('form').ajaxSubmit();
      //order index
      i = $(this).attr('alt').split("_")[0];
      //doc index
      doc_i = $(this).attr('alt').split("_")[1];
      //let's find all applicable doc types
      types_select = 'select[id*=validation_history_satisfies_validation_methods][alt='+$(this).attr('alt')+']'
      types=$.get_selected_options(types_select, 'text');
      alt=$(this).parents().find('span.doc_filename').attr('alt');
      identifier = alt+'_'+$(this).attr('alt');
      //get the newly selected rule (should be 'None')
      rules = $.get_selected_options(this, 'text');
      //change status to approved
      for(r=0; r<rules.length; r++){
        applied=false;
        if(!applied){
          for(x=0;x<types.length;x++){
            $('li[alt=method_'+types[x]+'_'+i+']')
              .addClass("approved_validation_document").addClass("crossout");
            $('li[alt=method_'+types[x]+'_'+i+'] ul')
              .append('<li class="applied_doc tree-connect" alt="'+identifier+
              '">applied: '+alt+'</li>');
          }
          $('ul.applied_docs_summary_'+i).append(
            '<li class="approved_validation_document applied_doc" alt="'
            +identifier+'">applied: '+alt+'</li>');
          applied=true;
        }
      }
      //if None was selected, then change status to pending
      for(r=0; r<rules.length; r++){
        if(rules[r]=='<%=Validation::NONE_SELECTED%>'){
          $('ul.applied_docs_summary_'+i+
            ' li[class*=approved_validation_document][alt*='+identifier+']')
            .remove();
          for(x=0;x<types.length;x++){
            $('li[alt=method_'+types[x]+'_'+i+'] ul li[alt='+identifier+']')
              .remove();
            if($('li[alt=method_'+types[x]+'_'+i+'] ul li').length==0)
              $('li[alt=method_'+types[x]+'_'+i+']')
              .removeClass("approved_validation_document").removeClass("crossout");
          }
        }
      }
    });
    <%if @certificate_order and !@certificate_order.certificate.is_code_signing?%>
      $(document).on('change', 'select[id^=domains]', function() {
      //$('select[id^=domains]').change(function(){
        var dcv_select=$(this);
        var dt = new Date();
        var time = (dt.getMonth()+1) + "-"
                + dt.getDate() + "-"
                + dt.getFullYear() + " "
                + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
        //prevent other options from being selected if None is selected
        methods=$.get_selected_options(this, 'text');
        if($.method_none_selected(methods)){
          $(this).find(':selected').each(function(c, selected){
            if($(selected).text()!='<%=Validation::NONE_SELECTED%>')
              $(selected).attr('selected', false);
          });
        }
        //get cert order index
        instruction=$('span[alt="'+$(this).attr('name')+'"]')[0];
        file=$(this).attr("alt").replace("*.", "").toLowerCase()+"/.well-known/pki-validation/"+$('.md5_hash').text()+".txt";
        https = "https://"+file;
        http = "http://"+file;
        wwwfile=$(this).attr("alt").replace("*.", "www.").toLowerCase()+"/.well-known/pki-validation/"+$('.md5_hash').text()+".txt";
        wwwhttps = "https://"+wwwfile;
        wwwhttp = "http://"+wwwfile;
        cname = $('.dns_md5_hash').text()+"."+$(this).attr("alt").replace("*.", "").toLowerCase()+" -> "+$('.dns_sha2_hash').text()+".comodoca.com";
        if(/@/.test(methods[0])){
          $(instruction).html("Validation instructions will be emailed to "+methods[0]+". Please follow those instructions.")
          $('td.pretest[class~="'+$(dcv_select).attr("alt")+'"]').html("n/a").css({ background: "white", color:"black" });
        }
        else if(/https/.test(methods[0])){
          instructions="Upload <a href='<%=http_dcv_file_csr_path(@ssl_slug, @certificate_order.csr.id)%>'>this file</a> to this location: <a href='"+https+"' target='_new'>"+https+"</a>";
          $(instruction).html(instructions);
          $.ajax({url: '<%=verification_check_csr_path(@ssl_slug, @certificate_order.csr)%>?protocol=https&dcv='+
            $(dcv_select).parents('tr').attr('id')}).done(
              function(data){
                $('td.pretest[class~="'+$(dcv_select).attr("alt")+'"]').html((data ? "passed" : "failed")).css((data ? { background: "green", color:"white" } : { background: "red", color:"white" }));
              });
        }
        else if(/http/.test(methods[0])){
          instructions="Upload <a href='<%=http_dcv_file_csr_path(@ssl_slug, @certificate_order.csr.id)%>'>this file</a> to this location: <a href='"+http+"' target='_new'>"+http+"</a>";
          $(instruction).html(instructions);
          $.ajax({url: '<%=verification_check_csr_path(@ssl_slug, @certificate_order.csr)%>?protocol=http&dcv='+
            $(dcv_select).parents('tr').attr('id')}).done(
              function(data){
                $('td.pretest[class~="'+$(dcv_select).attr("alt")+'"]').html((data ? "passed" : "failed")).css((data ? { background: "green", color:"white" } : { background: "red", color:"white" }));
              });
        }
        else if(/cname/.test(methods[0])){
          $(instruction).html("Create CNAME: "+cname);
          $.ajax({url: '<%=verification_check_csr_path(@ssl_slug, @certificate_order.csr)%>?protocol=cname&dcv='+
          $(dcv_select).parents('tr').attr('id')}).done(
                  function(data){
                    $('td.pretest[class~="'+$(dcv_select).attr("alt")+'"]').html((data ? "passed" : "failed")).css((data ? { background: "green", color:"white" } : { background: "red", color:"white" }));
                  });
        }
        $(instruction).css({ background: "yellow" });
      });
    <%end%>

    /*$('select[id^=domains]:enabled').each(function(index, value){
      $(this).change();
    });*/

    $('select[id*=validation_history_satisfies_validation_methods]').change(function(){
      //prevent other options from being selected if None is selected
      methods=$.get_selected_options(this, 'text');
      if($.method_none_selected(methods)){
        $(this).find(':selected').each(function(c, selected){
          if($(selected).text()!='<%=Validation::NONE_SELECTED%>')
            $(selected).attr('selected', false);
        });
      }
      $(this).parents().filter('form').ajaxSubmit();
      //get cert order index
      i = $(this).attr('alt').split("_")[0];
      //doc index
      doc_i = $(this).attr('alt').split("_")[1];
      rules_select = 'select[id*=validation_history_validation_rules][alt='+$(this).attr('alt')+']'
      rules=$.get_selected_options(rules_select, 'val');
      //highlight a selected method
      $.unapprove_all_methods(methods, i);
      //get selected values
      num_docs = $('.val_docs_list_'+i).attr('alt');
      //poll through each doc and apply each doc to the selected methods unless none is selected
      for(mi=0; mi<num_docs; mi++){
        rules_select = 'select[id*=validation_history_validation_rules][alt^='+i+']';
        rules=$.get_selected_array_options(rules_select, mi, 'val');
        selects = 'select[id*=validation_history_satisfies_validation_methods][alt^='+i+']';
        methods = $.get_selected_array_options(selects, mi, 'text');
        if(!$.method_none_selected(rules)){
          for(m=0; m<methods.length; m++){
            for(ri=0; ri<rules.length; ri++){
              alt=$($(rules_select)[mi]).parents().find('span.doc_filename').attr('alt');
              identifier = alt+'_'+$($(rules_select)[mi]).attr('alt');
              method = 'method_'+methods[m]+'_'+i;
              $('li[alt*='+method+'][class*=rule_'+rules[ri]+']')
                .addClass("approved_validation_document").addClass("crossout");
              $('li[alt*='+method+'][class*=rule_'+rules[ri]+'] ul')
                .append('<li class="applied_doc tree-connect" alt="'+
                identifier+'">applied: '+alt+'</li>');
            }
          }
        }
      }
    });
    var show_documents=true;
    $(':radio[name*=has_documents]').click(function(){
      if($(this).val()=="false"){
        show_documents=false;
        $('#documents_upload_instructions, #multi_upload').hide();
        //$('#button_container').fadeIn();
      }
      else{
        show_documents=true;
        $('#documents_upload_instructions, #multi_upload').show();
        //$('#button_container').fadeOut();
      }
    });
    $('.has_csr_container').click(function(){
      $(this).siblings().filter(':radio[name*=has_documents]').click();
    });
    $('.clickable_choice').click(function(e){
      $(this).siblings().filter(':input').click();
    });
    $(':radio[name*=refer_to_others]').click(function(e){
      $(this).refer_to_others_toggle();
    });
    if($(':radio:checked[name*=refer_to_others]').length>0)
      $(':radio:checked[name*=refer_to_others]').refer_to_others_toggle();
    $(':radio[name*=preferred_sections][value=<%=OtherPartyValidationRequest::DOCUMENTS_SECTION%>]').click(
      function(){
        $('#proof_of_dcv_section').show();
        $('#documents_upload_heading').hide();
        $('#documents_upload_section').hide();});
    $(':radio[name*=preferred_sections][value=<%=OtherPartyValidationRequest::DCV_SECTION%>]').click(
      function(){
        $('#proof_of_dcv_section').hide();
        $('#documents_upload_heading').show();
        $('#documents_upload_section').show();});
    $(':radio[name*=preferred_sections][value=<%=OtherPartyValidationRequest::BOTH_SECTIONS%>]').click(
      function(e){
        $('#proof_of_dcv_section').hide();
        $('#documents_upload_heading').hide();
        $('#documents_upload_section').hide();
        });
    $(':radio[name*=has_documents][value=false]').click();
    $('#send_to_ca').livequery(
      'ajax:beforeSend', function(){
        $('#processing_ca').show();
      }).livequery(
      'ajax:success', function(event, data, status, xhr){
        if(data!="null"){
          $('dl#sent_to_ca_results').prepend(data.result);
        }
      }).livequery(
      'ajax:complete', function(event, data, status, xhr){
        $('#processing_ca').hide();
      });
    $('#send_dcv_email').livequery(
      'ajax:beforeSend', function(){
          $('#busy_sending').show();
          $('#ajax_response').remove();
          status_bar = $("<div class='flash_message close' id='ajax_response'></div>");
          status_bar.hide();
          $('.upload_document_container').before(status_bar);
      }).livequery(
      'ajax:success', function(event, data, status, xhr){
        if(data!="null"){
          if(typeof data.email_address=="undefined"){
            status_bar.addClass('notice').append("<span>Validation email sent to "+
                    data.domain_control_validation.email_address+".</span>");
            $('#dcv_sent_to_address').html(data.domain_control_validation.email_address).effect(
                    "highlight", {color:'green'}, 500);
          }
          else{
            //assume an error
            status_bar.addClass('error').append("<span>"+data.email_address+"</span>");
          }
          $('#busy_sending').hide();
        }
      }).livequery(
      'ajax:complete', function(event, data, status, xhr){
        status_bar.fadeIn();
        $('#processing_ca').hide();
      });
    $('#new_other_party_validation_request').livequery(
      'ajax:beforeSend', function(){
        $('#ajax_response').remove();
        status_bar = $("<div class='flash_message close' id='ajax_response'></div>");
        status_bar.hide();
        $('.upload_document_container').before(status_bar);
      }).livequery(
      'ajax:success', function(event, data, status, xhr){
        if(data!="null"){
          if(typeof data.other_party_validation_request.email_addresses!=="undefined"){
            var emails = $("<ul></ul>");
            $.each(data.other_party_validation_request.email_addresses, function(key, value){
              emails.append("<li>"+value+"</li>");
            });
            status_bar.addClass('notice').append("<span>Request for validation sent to </span>");
            status_bar.find('span').append(emails);
          }
          else{
            //assume an error
            status_bar.addClass('error').append("<span>Error!</span>");
          }
        }
      }).livequery('ajax:error', function(event, xhr, status, error) {
          if(typeof(data.base)!=='undefined')
            status_bar.addClass('error').append("<span>"+data.base+"</span>");
          else{
            var msg = $("<span><ul></ul></span>");
            $.each(data, function(key, value){
              msg.append("<li>"+key+" "+value+"</li>");
            });
            status_bar.addClass('error').append(msg);
          }
      }).livequery('ajax:complete', function(event, data, status, xhr) {
          status_bar.fadeIn();
      });

    // loading domains
    var url = window.location.pathname;
    if (url.substr(url.lastIndexOf('/') + 1, url.length) == 'new') {
      <%if @certificate_order%>
        $('#validation_common_type').change(function() {
          var slt_type = $(this).val();
          var domain_list = $('tbody.domain_list').find('tr.certificate_name');

          $.each(domain_list, function(idx, domain) {
            $(domain).find('.check_box').parent().css('background-color', 'white');
          });

          switch (slt_type) {
            case 'delete':
              var ajaxRemoveDomainUrl = '<%=remove_domains_certificate_order_validation_path(@ssl_slug, @certificate_order)%>';
              var order_number = '<%=@certificate_order.external_order_number%>';
              var domain_ids = '';

              $.each(domain_list, function(idx, domain) {
                var is_checked = $(domain).find('.check_box').prop('checked');
                if (is_checked) {
                  domain_ids = ',' + domain_ids + $(domain).find('.check_box').prop('id');
                }
              });

              if (domain_ids.length > 0) {
                $('#upload_validations').hide();

                $.ajax({
                  url: ajaxRemoveDomainUrl,
                  data: {
                    domain_ids: domain_ids.substr(1),
                    order_number: order_number,
                  },
                  type: "POST",
                  success: function (result) {
                    if (Object.keys(result).length > 0) {
                      $.each(domain_ids.substr(1).split(','), function(ids, domain) {
                        if ($.inArray(domain, Object.keys(result)) == -1) {
                          $('#certificate_name_' + domain).next().remove();
                          $('#certificate_name_' + domain).remove();
                        }
                      });

                      Object.keys(result).map(function(key) {
                        //console.log(result[key].split('|')[0] + " >>> " + result[key].split('|')[1]);
                        $('#' + key).parent().css('background-color', 'red');
                      });

                      $('#upload_validations').show();
                    } else {
                      $.each(domain_ids.substr(1).split(','), function(ids, domain) {
                        $('#certificate_name_' + domain).next().remove();
                        $('#certificate_name_' + domain).remove();
                      });

                      if ($('tbody.domain_list').find('tr.certificate_name').length == 0) {
                        $('#upload_validations').hide();
                      } else {
                        $('#upload_validations').show();
                      }
                    }

                  }
                });
              } else {
                alert('There are no selected domains for delete.');
                $(this).val('');
              }

              break;
            case 'http_csr_hash':
            case 'https_csr_hash':
            case 'cname_csr_hash':
              var changed_count = 0;
              $.each(domain_list, function(idx, domain) {
                var is_checked = $(domain).find('.check_box').prop('checked');
                if (is_checked) {
                  $(domain).find('select').val(slt_type).trigger('change');
                  changed_count ++;
                }
              });

              if (changed_count === 0) {
                if (slt_type == 'http_csr_hash') {
                  alert('There are no selected domains for "HTTP CSR HASH"');
                } else if (slt_type == 'https_csr_hash') {
                  alert('There are no selected domains for "HTTPS CSR HASH"');
                } else {
                  alert('There are no selected domains for "CNAME CAR HASH"');
                }
                $(this).val('');
              }

              break;
            default:
          }

          /*$.each(domain_list, function(idx, domain) {
           var is_checked = $(domain).find('.check_box').prop('checked');
           if (is_checked) {
           switch (slt_type) {
           case 'delete':
           //TODO: What value should be selected?
           var ajaxDomainUrl = '< %=get_asynch_domains_certificate_order_validation_path(@ssl_slug, @certificate_order)%>';
           var order_number = '< %=@certificate_order.id%>';
           $.ajax({
           url: ajaxDomainUrl,
           data: {
           domain_name: value,
           order_number: order_number,
           },
           type: "POST",
           success: function (result) {
           alert(result);
           var parent = $(domain).parent();
           $(domain).next().remove();
           $(domain).remove();

           if ($('tbody.domain_list').find('tr.certificate_name').length == 0) {
           $('#upload_validations').hide();
           }
           }
           });
           case 'http_csr_hash':
           case 'https_csr_hash':
           case 'cname_csr_hash':
           $(domain).find('select').val(slt_type).trigger('change');
           default:
           }
           }
           });*/
        });

        var domain_str = $('#cert_names_ids_str').val();
        var domains = [];
        if (domain_str.length > 0) {
          domains = domain_str.substr(0, domain_str.length - 1).split(',');

          var ajaxDomainUrl = '<%=get_asynch_domains_certificate_order_validation_path(@ssl_slug, @certificate_order)%>';
          var exist_ext_order_number = '<%=@certificate_order.external_order_number%>';
          <%
            mdc_validation = ComodoApi.mdc_status(@certificate_order)
            ds = mdc_validation.domain_status
            is_ucc = @certificate_order.certificate.is_ucc?
          %>

          var all_validated = false;
          var count_validated = 0;
          var count_domain = 0;
          var total = domains.length;

          $.each(domains, function(idx, value) {
            $.ajax({
              url: ajaxDomainUrl,
              data: {
                domain_id: value,
                domain_count: total,
                exist_ext_order_number: exist_ext_order_number,
                domain_status: JSON.parse('<%= raw ds ? ds.to_json : {}%>'),
                is_ucc: '<%=is_ucc%>',
                count_validated: count_validated,
                count_domain: count_domain,
              },
              type: "POST",
              success: function(result) {
                // TODO: Loading Domain.
                Object.keys(result).map(function(key) {
                  if (key == 'tr_info') {
                    if (result[key]['count_domain']) {
                      count_domain = result[key]['count_domain'];
                    }
                    if (result[key]['count_validated']) {
                      count_validated = result[key]['count_validated'];
                    }
                    if (result[key]['all_validated']) {
                      all_validated = result[key]['all_validated'] == 'true';
                    }

                    var trElement = $('<tr></tr>');
                    trElement.attr('class', 'certificate_name');
                    trElement.attr('id', 'certificate_name_' + value);

                    $('.domain_list').append(trElement);

                    tdElement = $('<td></td>');
                    var checkboxElement = $('<input></input>');
                    checkboxElement.attr('class', 'check_box');
                    checkboxElement.attr('id', result[key]['checkbox_id']);
                    checkboxElement.attr('type', 'checkbox');
                    tdElement.append(checkboxElement);
                    trElement.append(tdElement);

                    tdElement = $('<td></td>');
                    tdElement.append(result[key]['domain_name']);
                    trElement.append(tdElement);

                    tdElement = $('<td></td>');
                    if ($.isEmptyObject(result[key]['options'])) {
                      tdElement.append('Validation satisfied for ' + result[key]['domain_name']);
                    } else {
                      var sltElement = $('<select></select>');
                      sltElement.attr('name', 'domains[' + result[key]['domain_name'] + '][dcv]');
                      sltElement.attr('id', 'domains_' + result[key]['domain_name'] + '_dcv');
                      sltElement.attr('alt', result[key]['domain_name']);

                      var optElement = $('<option></option>');
                      optElement.attr('value', '');
                      optElement.append('Please select a validation method');
                      sltElement.append(optElement);

                      Object.keys(result[key]['options']).map(function(optGroupKey) {
                        var optGroupElement = $('<optgroup></optgroup>');
                        optGroupElement.attr('label', optGroupKey);

                        Object.keys(result[key]['options'][optGroupKey]).map(function(optKey) {
                          var optElement = $('<option></option>');
                          optElement.attr('value', optKey);
                          optElement.append(result[key]['options'][optGroupKey][optKey]);
                          optGroupElement.append(optElement);
                        });

                        sltElement.append(optGroupElement);
                      });

                      tdElement.append(sltElement);
                    }
                    trElement.append(tdElement);
                    $('[name="domains[' + result[key]['domain_name'] + '][dcv]"]').val(result[key]['slt_option']);

                    tdElement = $('<td></td>');
                    tdElement.append(result[key]['pretest']);
                    tdElement.attr('class', 'pretest ' + result[key]['domain_name']);
                    trElement.append(tdElement);

                    tdElement = $('<td></td>');
                    tdElement.append(result[key]['attempt']);
                    tdElement.attr('class', 'attempt ' + result[key]['domain_name']);
                    trElement.append(tdElement);

                    tdElement = $('<td></td>');
                    tdElement.append(result[key]['attempted_on']);
                    tdElement.attr('class', 'attempted_on ' + result[key]['domain_name']);
                    trElement.append(tdElement);

                    var tdElement = $('<td></td>');
                    tdElement.append(result[key]['status']);
                    tdElement.attr('class', 'status ' + result[key]['domain_name']);
                    trElement.append(tdElement);

                  } else if (key == 'tr_instruction') {
                    var trElement = $('<tr></tr>');
                    $('.domain_list').append(trElement);

                    tdElement = $('<td></td>');
                    trElement.append(tdElement);
                    tdElement = $('<td></td>');
                    trElement.append(tdElement);

                    var tdElement = $('<td></td>');
                    tdElement.attr('colspan', 5);
                    tdElement.append('Instructions: ');

                    var spanElement = $('<span></span>');
                    spanElement.attr('alt', result[key]['instruction']);
                    spanElement.append('Please select a validation method');
                    tdElement.append(spanElement);
                    trElement.append(tdElement);

                  } else if (key == 'caa_test_failed') {
                    var trElement = $('<tr></tr>');
                    trElement.attr('class', 'certificate_name');
                    trElement.attr('id', 'certificate_name_' + value);

                    $('.domain_list').append(trElement);

                    tdElement = $('<td></td>');
                    var checkboxElement = $('<input></input>');
                    checkboxElement.attr('class', 'check_box');
                    checkboxElement.attr('id', result[key]['checkbox_id']);
                    checkboxElement.attr('type', 'checkbox');
                    tdElement.append(checkboxElement);
                    trElement.append(tdElement);

                    var tdElement = $('<td></td>');
                    tdElement.attr('colspan', 5);
                    tdElement.append('CAA Test Failed!');
                    trElement.append(tdElement);

                    tdElement = $('<td></td>');
                    tdElement.append(result[key]['domain_name']);
                    trElement.append(tdElement);
                  }
                });

                if (idx === (total - 1) && !all_validated) {
                  $('#upload_validations').show();
                }

                $('select[id^=domains]').last().change();
              }
            });
          });
        } else {
          $('.domains_loader_wrap').hide();
        }
      <%end%>
    }

  });
});
</script>
