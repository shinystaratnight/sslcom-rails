-title = "Domains"
-content_for :title, title
=render :partial => 'index_scripts'

#search_bar
  =form_tag :search_domains, :id=>'search_form', :method=>:get do
    =text_field_tag :search, @search
    =hidden_field_tag :per_page, @per_page
    =button_tag 'Search', :id=>'btn_domain_search'

=render :partial=>'search_filters'

=form_tag '', id: 'domains_list', method: :post do
  #validations
    %table(cellspacing="0")
      %tfoot
        %tr
          %td.wrap_number_rows(colspan='2')
            =select_tag :number_rows,
            options_for_select([[5, 5], [10, 10], [20, 20], [50, 50], [100, 100]], @per_page),
            :class=>'per_page'
          %td(colspan='4')=will_paginate @domains
      %caption
        =title
        [learn about #{link_to "prevalidating domains", "https://#{portal_domain}/how-to/domain-name-pre-validation/", target: "_blank"}]
        |
        =link_to 'CSRs Manager', managed_csrs_path(@ssl_slug)
        %ul(style="float: right; display: flex; list-style: none;")
          -unless current_user.ssl_account.all_csrs.blank?
            %li(style="margin-right: 0.5rem")
              =submit_tag 'validate by cname/file upload', formaction: "#{select_csr_domains_path(@ssl_slug)}", style: "padding: 0.5rem", id: "d_name_action_bind", disabled: 'true'
          %li(style="margin-right: 0.5rem")
            =submit_tag 'validate by email code', formaction: "#{validate_selected_domains_path(@ssl_slug)}", style: "padding: 0.5rem", id: "d_name_action_validate", disabled: 'true'
          %li(style="margin-right: 0.5rem")
            =submit_tag 'remove', style: "padding: 0.5rem", id: "d_name_action_remove", disabled: 'true'
          %li
            =button_tag 'add', :type => 'button', style: "padding: 0.5rem", id: "d_name_action_add"
      %tr.heading_row
        %th
        %th.name(scope="col") Name
        %th(scope="col") Scoped
        %th(scope="col") Status
        %th(scope="col") Revalidation
      -if @domains && @domains.length > 0
        -@domains.each do |d|
          -satisfied = d.domain_control_validations.with_satisfied_state.last
          -dcv = d.domain_control_validations.last
          -validation_status = satisfied ? 'validated' : 'pending validation'
          -remaining = dcv.try(:responded_at) ? DomainControlValidation::MAX_DURATION_DAYS[:email]-(Date.today-dcv.responded_at.to_date).to_i : nil
          -remaining = 0 if remaining && remaining < 0
          -validity_period = (validation_status=='pending validation' || remaining.nil?) ? 'n/a' : "#{remaining} days remaining"
          -order_ref = d.certificate_content ? d.certificate_content.certificate_order.ref : ((dcv && dcv.csr_unique_value) ? dcv.csr_unique_value.csr.ref : 'Team')
          -status_link = validation_status
          -unless validation_status=='validated'
            -if dcv.try(:csr_unique_value)
              -status_link = d.certificate_content ? (link_to validation_status, new_certificate_order_validation_path(@ssl_slug, d.certificate_content.certificate_order)) : (link_to validation_status, validate_against_csr_domains_path(@ssl_slug, unique_value: dcv.csr_unique_value.unique_value))
            -else
              -status_link = link_to validation_status, validate_selected_domains_path(@ssl_slug, d_name_check: [d.id])
          %tr
            %td=(order_ref=='Team' || (dcv && dcv.csr_unique_value)) ? (check_box_tag "d_name_check[]", d.id, false, id: "d_name_check_#{d.id}", class: "d_name_check") : ''
            %td=d.name
            %td=d.certificate_content ? (link_to order_ref, d.certificate_content.issued? ? certificate_order_path(d.certificate_content.certificate_order) : new_certificate_order_validation_path(@ssl_slug, d.certificate_content.certificate_order)) : ((dcv && dcv.csr_unique_value) ? (link_to order_ref, validate_against_csr_domains_path(@ssl_slug, unique_value: dcv.csr_unique_value.unique_value)) : 'Team')
            %td.d_name_status=status_link
            %td=validity_period
      -else
        %tr
          %td(colspan="5")
            There are no domains

= javascript_include_tag 'psl.min'

#domain_modal.domain-modal
  #domain_modal_content.modal-content
    #domain_modal_header.modal-header
      %span#domain_modal_close.close
        &times;
      %p
        Input domain name(s) (separated by commas or spaces)
    #domain_modal_body.modal-body
      = text_area_tag 'domain_names', nil, :rows => '5'
      #required-valid
        * All Domains should be valid!
    #domain_modal_footer.modal-footer
      = button_tag 'Save', :type => 'button', :class => 'btn btn-grey btn-save-domains', :disabled => true
