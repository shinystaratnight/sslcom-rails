-slug_params = {ssl_slug: @ssl_slug}
%table(cellspacing="0")
  %tbody
    %tr
      %td(colspan="6")
        -if current_user.is_admin?
          :javascript
            function change_login_#{u.id}()
            {
              var login = prompt("What is the new username? (3 chars min)", '');
              if (login == null || login=="")
                return;
              else
                window.location = '#{change_login_user_url(u)}?login='+encodeURIComponent(login);
            }
        .half_width_box
          %ul
            %li
              %strong manage account
            - if permitted_to? :admin_manage
              - if u.ssl_account && permitted_to?(:create, :funded_accounts)
                %li available funds: $#{u.ssl_account.funded_account.amount}
              %li=remote_login_link(u)
              %li=link_to 'user dashboard', admin_show_user_path(u)
              %li=link_to 'change email address', edit_email_user_url(u)
              %li=link_to 'change username', '#', onclick: "change_login_#{u.id}()"
              %li=link_to 'change password', edit_password_user_url(u)
              - if permitted_to? :set_default_team_max, :users
                %li=link_to "change team max (current #{u.max_teams})", edit_user_path(u, update_own_team_limit: true)
            -unless current_user.is_system_admins?
              - if permitted_to? :update_roles, :managed_users
                %li=link_to 'change roles', edit_managed_user_path(u, slug_params)
              - if permitted_to? :remove_from_account, :managed_users
                %li=link_to 'remove user from this account', remove_from_account_managed_user_path(u, slug_params)
              - if permitted_to?(:resend_account_invite, :users) and u.ssl_account_users.is_approved_ssl_account(current_user.ssl_account.id).count < 1
                %li=link_to 'resend invite', resend_account_invite_user_path(u,
                          ssl_account_id: current_user.ssl_account.id, from_user: current_user)
        .half_width_box
          .adjust_status
          =form_for u, url: enable_disable_users_path(id: u.id) do |ed|
            -if current_user.is_system_admins?
              -u.status = u.is_admin_disabled? ? 'disabled' : 'enabled'
            -else
              -u.status = u.is_disabled?(current_user.ssl_account) ? 'disabled' : 'enabled'
            %ul
              %li
                %strong adjust status
              %li
                =ed.radio_button :status, 'enabled'
                enabled
              %li
                =ed.radio_button :status, 'disabled'
                disabled
            -#
              .account_type
                =form_for u, :url=>admin_update_user_url(u) do |f|
                  %ul
                    %li
                      %strong account type
                    %li
                      =f.radio_button :status, 'enabled'
                      customer
                    %li
                      =f.radio_button :status, 'disabled'
                      reseller tier 1
        -if current_user.is_system_admins?
          .full_width_box
            .adjust_status
              %ul
                %li
                  %strong teams
                - u.ssl_accounts.each do |ssl|
                  -slug_params = {ssl_slug: ssl.to_slug}
                  - status = ssl_account_status(u, ssl).first
                  %li
                    -owner = (u.is_account_owner?(ssl)) ? '(owner) ' : ''
                    =link_to("#{owner} #{ssl.get_team_name}", users_path(search: ssl.get_team_name))+" [ #{status}"
                    - if status == 'token expired'
                      =link_to '&rarr; RESEND INVITE'.html_safe,
                        resend_account_invite_user_path(u, ssl_account_id: ssl, from_user: current_user)
                    ][
                    =link_to "team url", edit_ssl_account_path(id: ssl.id, url_slug: true, ssl_slug: @ssl_slug)
                    ][
                    -path_name = ssl.company_name ? ssl.company_name : 'team name'
                    =link_to path_name, edit_ssl_account_path(id: ssl.id, update_company_name: true, ssl_slug: @ssl_slug)
                    ][
                    =link_to "users(#{ssl.users.count})", users_path(slug_params)
                    ][
                    %a{onclick: "adjust_funds_ssl_account('#{ssl.to_slug}','#{ssl.get_team_name}')"} $#{ssl.funded_account.try :amount}
                    ][
                    =link_to "orders(#{ssl.certificate_orders.count})", certificate_orders_path(slug_params)
                    ][
                    =link_to "transactions(#{ssl.orders.count})", orders_path(slug_params)
                    ][
                    =link_to "billing profiles(#{ssl.billing_profiles.count})", billing_profiles_path(slug_params)
                    ][
                    =link_to "validations(#{ssl.validations.count})", validations_path(slug_params)
                    ][
                    =link_to "site seals(#{ssl.site_seals.count})", site_seals_path(slug_params)
                    ]
                    - if permitted_to? :update_roles, :managed_users
                      [
                      =link_to 'change roles', edit_managed_user_path(u, slug_params)
                      ]
                    -unless ssl.get_account_owner == u
                      [
                      =link_to "leave", remove_from_account_managed_user_path(u, slug_params.merge(ssl_account_id: ssl.id)),data:{confirm: "Remove #{u.login} from team #{ssl.company_name}?"}
                      ]
