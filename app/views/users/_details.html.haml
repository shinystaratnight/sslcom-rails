-u = user
-slug_params  = {ssl_slug: @ssl_slug}
-managed_user = u.becomes(ManagedUser)
%tr.expanded
  %td{colspan: current_user.is_system_admins? ? "7" : "5"}
    .certificate_details
      %table(cellspacing="0")
        %tbody
          %tr
            %td
              -if current_user.is_admin?
                :javascript
                  function change_login_#{u.id}()
                  {
                    var login = prompt("What is the new username? (3 chars min)", '');
                    if (login == null || login=="")
                      return;
                    else
                      window.location = '#{change_login_user_url(u)}?login='+encodeURIComponent(login);
                  }
              .half_width_box
                %ul
                  -unless current_user.is_system_admins?
                    -invite_status = u.team_status(current_user.ssl_account)
                    -if invite_status && invite_status != :accepted
                      -invite = u.ssl_account_users.where(ssl_account_id: current_user.ssl_account).uniq.compact.first
                      %li
                        %strong
                          ="invite status: <span class='chip tiny'>#{invite_status.to_s.upcase}</span>".html_safe
                        %br
                        %br
                          -{invited: invite.invited_at, declined: invite.declined_at}.compact.each do |s|
                            %span{class: 'timestamp'}
                              ="&nbsp;#{s.first}: #{s.last.strftime('%b %d, %Y %l:%m %p')}".html_safe
                              %br
                  %li
                    %strong manage account
                  -if permitted_to? :admin_manage, u
                    %li login count: #{u.login_count}
                    %li failed login count: #{u.failed_login_count}
                    %li last login ip: #{link_to(u.last_login_ip, "http://www.infosniper.net/index.php?ip_address=#{u.last_login_ip}&map_source=1&overview_map=1&lang=1&map_type=1&zoom_level=7", target: "_blank") if u.last_login_ip}
                    %li current login ip: #{link_to(u.current_login_ip, "http://www.infosniper.net/index.php?ip_address=#{u.current_login_ip}&map_source=1&overview_map=1&lang=1&map_type=1&zoom_level=7", target: "_blank") if u.current_login_ip}
                    %li=remote_login_link(u)
                    %li=link_to 'change email address', edit_email_user_url(u)
                    %li=link_to 'change username', '#', onclick: "change_login_#{u.id}()"
                    %li=link_to 'change password', edit_password_user_url(u)
                    - if permitted_to? :set_default_team_max, :users
                      %li=link_to "change owned teams limit (#{u.max_teams})", edit_user_path(u, update_own_team_limit: true)
                    - if permitted_to?(:admin_activate, u) && !u.active?
                      %br
                      %li="<span class='chip'>#{link_to 'activate', edit_user_path(u, admin_activate: true)}</span>".html_safe
                  -unless current_user.is_system_admins?
                    - if permitted_to? :update_roles, managed_user
                      %li=link_to 'change roles', edit_managed_user_path(u, slug_params)
                    - if permitted_to? :remove_from_account, managed_user
                      %li=link_to 'remove user from this account', remove_from_account_managed_user_path(u, slug_params)
                    - if permitted_to?(:resend_account_invite, :users) and u.ssl_account_users.is_approved_ssl_account(current_user.ssl_account.id).count < 1
                      %li=link_to 'resend invite', resend_account_invite_user_path(u,
                                ssl_account_id: current_user.ssl_account.id, from_user: current_user)
              -if permitted_to? :enable_disable, u
                .half_width_box
                  %table
                    %tr
                      %td(width="70%")
                        .adjust_status
                          =form_for u, url: enable_disable_users_path(id: u.id) do |ed|
                            -if current_user.is_system_admins?
                              -u.status = u.is_admin_disabled? ? 'disabled' : 'enabled'
                            -else
                              -u.status = u.is_disabled?(current_user.ssl_account) ? 'disabled' : 'enabled'
                            %ul
                              %li
                                %strong user enabled?
                              %li
                                =ed.radio_button :status, 'enabled'
                                enabled
                              %li
                                =ed.radio_button :status, 'disabled'
                                disabled
                          .clearfix.adjust_duo_status
                            =form_for u, url: enable_disable_duo_users_path(id: u.id) do |ed|
                              %ul
                                %li
                                  %strong duo enabled?
                                %li
                                  =ed.radio_button :duo_enabled, 'enabled'
                                  enabled
                                %li
                                  =ed.radio_button :duo_enabled, 'disabled'
                                  disabled
                      %td(width="30%")
                        -if current_user.is_system_admins?
                          %ul
                            %li
                              %strong audit log
                          %ul
                            %li
                              -audits=(u.system_audits.empty? ? "n/a" : "###")+"\n"
                              -u.system_audits.each do |audit|
                                -audits << "date: #{audit.created_at}\nuser: #{audit.owner.try :login}\naction: #{audit.action}\n###\n"
                              =text_area_tag :audits, audits, :size=>"30x10"
              -if current_user.is_system_admins?
                .full_width_box
                  .adjust_status
                    %ul
                      %li
                        %strong teams #{link_to "manage", teams_user_path(u)}
                      - u.ssl_accounts.each do |ssl_account|
                        -slug_params = {ssl_slug: ssl_account.to_slug}
                        - status = ssl_account_status(u, ssl_account).first
                        %li
                          =ssl_account.acct_number
                          [ #{status}
                          - if status == 'token expired'
                            =link_to '&rarr; RESEND INVITE'.html_safe,
                              resend_account_invite_user_path(u, ssl_account_id: ssl_account, from_user: current_user)
                          - if current_user.is_system_admins?
                            ][
                            =link_to 'dashboard', admin_show_user_path(u, slug_params)
                          ][
                          slug:
                          =link_to(ssl_account.to_slug, edit_ssl_account_path({url_slug: true}.merge!(slug_params)))
                          ][
                          name:
                          =link_to ssl_account.get_team_name, edit_ssl_account_path({update_company_name: true}.merge!(slug_params))
                          ][
                          =link_to "users(#{ssl_account.cached_users.count})", users_path(slug_params)
                          ][
                          %a{style:"cursor: pointer;", onclick: "adjust_funds_ssl_account('#{ssl_account.to_slug}','#{ssl_account.get_team_name}')"} $#{ssl_account.funded_account.try :amount}
                          ][
                          =link_to "orders(#{ssl_account.cached_certificate_orders_count})", certificate_orders_path(slug_params)
                          ][
                          =link_to "transactions(#{ssl_account.cached_orders.count})", orders_path(slug_params)
                          ][
                          =link_to "billing profiles(#{ssl_account.billing_profiles.count})", billing_profiles_path(slug_params)
                          ][
                          =link_to "validations(#{ssl_account.validations.count})", validations_path(slug_params)
                          ][
                          =link_to "site seals(#{ssl_account.site_seals.count})", site_seals_path(slug_params)
                          - if permitted_to? :update_roles, :managed_users
                            ][
                            roles:
                            =link_to u.role_symbols(ssl_account).join('/'), edit_managed_user_path(u, slug_params)
                          -unless ssl_account.get_account_owner == u
                            ][
                            =link_to "leave", remove_from_account_managed_user_path(u, slug_params.merge(ssl_account_id: ssl_account.id)),data:{confirm: "Remove #{u.login} from team #{ssl_account.company_name}?"}
                          ]
                        %li &nbsp;
