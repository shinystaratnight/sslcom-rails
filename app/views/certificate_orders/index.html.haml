-content_for :title, "Certificate Order Management"
=render :partial => 'index_scripts'
#search_bar
  =form_tag :search_certificate_orders, :id=>'search_form', :method=>:get do
    subject or ref#
    =text_field_tag :search, @search
    =hidden_field_tag :per_page, @per_page
    =button_tag 'Search', :id=>'btn_cert_order_search'
    =button_tag 'Filters', :type=>'button', :id=>'btn_cert_order_filter'

%div.hidden#wrap_cert_order_filter
  .wrap_filter_items.clearfix
    .filter_items_col
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_login_chk, true, false, :class=>'filter_chk'
        .filter_label
          Login
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_login, nil, :class=>'filter_cont_text', 'data-field'=>'login'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_email_chk, true, false, :class=>'filter_chk'
        .filter_label
          Email
          .filter_cont.hidden{'data-type'=>'text'}
            =email_field_tag :filter_email, nil, :class=>'filter_cont_text', 'data-field'=>'email'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_account_chk, true, false, :class=>'filter_chk'
        .filter_label
          Account
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_account, nil, :class=>'filter_cont_text', 'data-field'=>'account'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_ref_chk, true, false, :class=>'filter_chk'
        .filter_label
          Ref
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_ref, nil, :class=>'filter_cont_text', 'data-field'=>'ref'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_common_name_chk, true, false, :class=>'filter_chk'
        .filter_label
          Common Name
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_common_name, nil, :class=>'filter_cont_text', 'data-field'=>'common_name'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_organization_chk, true, false, :class=>'filter_chk'
        .filter_label
          Organization
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_organization, nil, :class=>'filter_cont_text', 'data-field'=>'organization'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_organization_unit_chk, true, false, :class=>'filter_chk'
        .filter_label
          Organization Unit
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_organization_unit, nil, :class=>'filter_cont_text', 'data-field'=>'organization_unit'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_address_chk, true, false, :class=>'filter_chk'
        .filter_label
          Address
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_address, nil, :class=>'filter_cont_text', 'data-field'=>'address'
    .filter_items_col
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_state_chk, true, false, :class=>'filter_chk'
        .filter_label
          State
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_state, nil, :class=>'filter_cont_text', 'data-field'=>'state'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_postal_code_chk, true, false, :class=>'filter_chk'
        .filter_label
          Postal Code
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_postal_code, nil, :class=>'filter_cont_text', 'data-field'=>'postal_code'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_subject_alternative_names_chk, true, false, :class=>'filter_chk'
        .filter_label
          Subject Alternative Names
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_subject_alternative_names, nil, :class=>'filter_cont_text', 'data-field'=>'subject_alternative_names'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_locality_chk, true, false, :class=>'filter_chk'
        .filter_label
          Locality
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_locality, nil, :class=>'filter_cont_text', 'data-field'=>'locality'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_country_chk, true, false, :class=>'filter_chk'
        .filter_label
          Country
          .filter_cont.hidden{'data-type'=>'select'}
            =select_tag :filter_country, options_for_select(Country::PRIORITY+[""], disabled: [""])+options_for_select(Country.approved.collect {|c| [ c.name, c.name ] }.sort{|x,y|x[0]<=>y[0]}), :class=>'filter_cont_slt', 'data-field'=>'country'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_product_chk, true, false, :class=>'filter_chk'
        .filter_label
          Product
          .filter_cont.hidden{'data-type'=>'select-multi'}
            =select_tag :filter_product,
            options_for_select([['Basic SSL (basicssl)', 'basic'],
              ['Wildcard SSL (wildcard)', 'wildcard'],
              ['Premium SSL (premiumssl)', 'premium'],
              ['High Assurance', 'high-assurance'],
              ['SAN SSL (ucc)', 'ucc'],
              ['EV SAN SSL (evucc)', 'evucc'],
              ['Code Signing (code-signing)', 'code-signing'],
              ['EV Code Signing (ev-code-signing)', 'ev-code-signing']]),
            :class=>'filter_cont_slt slt-large', 'data-field'=>'product', :multiple=> true
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_signature_chk, true, false, :class=>'filter_chk'
        .filter_label
          Signature
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_signature, nil, :class=>'filter_cont_text', 'data-field'=>'signature'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_fingerprint_chk, true, false, :class=>'filter_chk'
        .filter_label
          Fingerprint
          .filter_cont.hidden{'data-type'=>'text'}
            =text_field_tag :filter_fingerprint, nil, :class=>'filter_cont_text', 'data-field'=>'fingerprint'
    .filter_items_col
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_strength_chk, true, false, :class=>'filter_chk'
        .filter_label
          Strength
          .filter_cont.hidden.clearfix{'data-type'=>'mix', 'data-field'=>'strength'}
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_1024_chk, true, false, 'data-field'=>'1024', :class=>'filter_cont_chk'
              .filter_cont_item_label
                1024
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_2048_chk, true, false, 'data-field'=>'2048', :class=>'filter_cont_chk'
              .filter_cont_item_label
                2048
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_4096_chk, true, false, 'data-field'=>'4096', :class=>'filter_cont_chk'
              .filter_cont_item_label
                4096
            .filter_cont_item
              =number_field_tag :filter_strength, nil, :class=>'filter_cont_text'
              Other
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_created_at_chk, true, false, :class=>'filter_chk'
        .filter_label
          Created At
          .filter_cont.hidden.clearfix{'data-type'=>'date'}
            .filter_cont_item
              =date_field_tag :filter_created_from, nil, :class=>'filter_cont_date', 'data-field'=>'created'
            .filter_cont_item -
            .filter_cont_item
              =date_field_tag :filter_created_to, nil, :class=>'filter_cont_date', 'data-field'=>'created'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_expires_at_chk, true, false, :class=>'filter_chk'
        .filter_label
          Expires At
          .filter_cont.hidden.clearfix{'data-type'=>'date'}
            .filter_cont_item
              =date_field_tag :filter_expires_from, nil, :class=>'filter_cont_date', 'data-field'=>'expires'
            .filter_cont_item -
            .filter_cont_item
              =date_field_tag :filter_expires_to, nil, :class=>'filter_cont_date', 'data-field'=>'expires'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_issued_at_chk, true, false, :class=>'filter_chk'
        .filter_label
          Issued At
          .filter_cont.hidden.clearfix{'data-type'=>'date'}
            .filter_cont_item
              =date_field_tag :filter_issued_from, nil, :class=>'filter_cont_date', 'data-field'=>'issued'
            .filter_cont_item -
            .filter_cont_item
              =date_field_tag :filter_issued_to, nil, :class=>'filter_cont_date', 'data-field'=>'issued'
      %div.filter_item.clearfix
        .filter_evt
          =check_box_tag :filter_physical_token_chk, true, false, :class=>'filter_chk'
        .filter_label
          Physical Token
          .filter_cont.hidden.clearfix{'data-type'=>'checkbox', 'data-field'=>'physical_token'}
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_in_transit_chk, true, false, 'data-field'=>'in_transit', :class=>'filter_cont_chk'
              .filter_cont_item_label
                In Transit
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_received_chk, true, false, 'data-field'=>'received', :class=>'filter_cont_chk'
              .filter_cont_item_label
                Received
            .filter_cont_item.clearfix
              .filter_cont_item_evt
                =check_box_tag :filter_activated_chk, true, false, 'data-field'=>'in_possession', :class=>'filter_cont_chk'
              .filter_cont_item_label
                Activated
      -if current_user.is_system_admins?
        %div.filter_item.clearfix
          .filter_evt
            =check_box_tag :filter_external_order_number_chk, true, false, :class=>'filter_chk'
          .filter_label
            External Order Number
            .filter_cont.hidden{'data-type'=>'text'}
              =text_field_tag :filter_external_order_number, nil, :class=>'filter_cont_text', 'data-field'=>'external_order_number'
        %div.filter_item.clearfix
          .filter_evt
            =check_box_tag :filter_notes_chk, true, false, :class=>'filter_chk'
          .filter_label
            Notes
            .filter_cont.hidden{'data-type'=>'text'}
              =text_field_tag :filter_notes, nil, :class=>'filter_cont_text', 'data-field'=>'notes'
        %div.filter_item.clearfix
          .filter_evt
            =check_box_tag :filter_is_test_chk, true, false, :class=>'filter_chk', 'data-field'=>'is_test'
          .filter_label Test
  =button_tag 'Search', :type=>'button', :id=>'btn_cert_order_filter_search'
  =button_tag 'Cancel', :type=>'button', :id=>'btn_close_cert_order_filter'

=render :partial=>'quick_links'
#certificate_orders
  %table(cellspacing="0")
    -if will_paginate @certificate_orders
      %tfoot
        %tr
          %td
            =select_tag :number_rows,
            options_for_select([[10, 10], [20, 20], [50, 50], [100, 100], [200, 200]], @per_page),
            :class=>'per_page'
          %td(colspan='5')=will_paginate @certificate_orders
    %caption 
      SSL Certificates Management
      =will_paginate @certificate_orders
    %tr.heading_row
      %td
      %th.name(scope="col")Subject
      %th(scope="col") Status
      %th(scope="col") Order Date
      %th(scope="col") Expires
      %th(scope="col") Action
    -@certificate_orders.each do |co|
      -order=Order.unscoped{co.order}
      -next if order.blank?
      -cc = co.certificate_content
      -cn = (co.is_unused_credit? || cc.csr.blank?) ? nil : cc.csr.common_name
      %tr
        %td.dropdown
          -if !co.is_expired_credit? and permitted_to?(:index, co)
            =image_tag 'expand.png'
        %td.name
          =render :partial=>'subject_column', :locals=>{:certificate_order=>co}
        %td.status_message(class="#{status_class(cc)}")
          #{certificate_order_status(cc)}
        %td
          =order.created_at.strftime("%b %d, %Y")
        %td(class="#{expires_on_class(cc)}")
          #{expires_on(cc)}
        %td.ssl_action
          #{action(co)}
      %tr.hidden.expanded
        %td(colspan="6")
          .certificate_details
            =render :partial=>'/certificate_orders/menu', :locals=>{:co=>co}
            =render :partial=>'/certificate_orders/co', :object=>co
            -if permitted_to?(:update, co)
              %table(cellspacing="0")
                %tbody
                  %tr
                    %td(colspan="6")
                      -unless co.is_expired_credit?
                        .certificate_details_box
                          %ul
                            %li
                              %strong certificate contents
                            -unless cc.blank? or co.certificate.is_evcs?
                              -if cc.signed_certificate.blank?
                                -if cc.csr.blank?
                                  %li
                                    %em waiting for csr
                                -else
                                  =render partial: "certificate_orders/registrant_fields", object: cc.csr
                              -else
                                =render partial: "certificate_orders/registrant_fields", object: cc.signed_certificate
                                -if (co.certificate_duration(:days).to_i > 1187)
                                  %li &nbsp;
                                  %li
                                    %strong 39 month limit
                                  %li
                                    Please note that since this certificate order has a duration that exceeds the 39 month hard limit set by the CA/Browser
                                    Forum (see #{link_to "https://info.ssl.com/faq-39-month-limit-to-new-certificates-what-you-need-to-know/", "https://info.ssl.com/faq-39-month-limit-to-new-certificates-what-you-need-to-know/"}), this certificate will
                                    expire in 36 months. However, you will be notified 60 days prior to expiration to reissue this certificate free of cost.
                                    A new certificate will then be issued for the remaining duration of the order so that you can continue to benefit from
                                    multi-year discounting while remaining compliant with the CA/Browser Forum requirements.
                            -unless co.is_unused_credit? || !permitted_to?(:show, co)
                              %li=link_to "view certificate details", certificate_order_path(@ssl_slug, co)
                            -if permitted_to?(:show, order)
                              %li=link_to "view order transaction", order_path(@ssl_slug, order)
                            %li.category_border
                            %li
                              %strong for developers
                            %li=link_to "preformatted api strings", developer_certificate_order_path(@ssl_slug, co)
                            %li=link_to "developer tools", is_sandbox? ? developers_certificate_orders_url : "https://sandbox.ssl.com"
                            -if current_user.is_admin?
                              %li
                                .notes_box
                                  =form_for co, :url=>admin_update_certificate_order_url(co) do |f|
                                    %li
                                      %strong notes for admins only
                                    %li
                                      =f.text_area :notes, cols: 40, rows: 10
                                .certificate_details_box
                                  %strong audit log
                                  -audits=(co.system_audits.empty? ? "n/a" : "###")+"\n"
                                  -co.system_audits.each do |audit|
                                    -audits << "date: #{audit.created_at}\nuser: #{audit.owner.try :login}\naction: #{audit.action}\n###\n"
                                  =text_area_tag :audits, audits, :size=>"30x10"
                        .certificate_details_box
                          %ul
                            %li
                              %strong contacts
                            -if cc.new?
                              %li
                                %em waiting for csr
                            -else
                              -unless cc.blank? || cc.certificate_contacts.blank?
                                -CertificateContent::CONTACT_ROLES.each do |role|
                                  %li
                                    \#{role}:
                                    -ct = cc.certificate_contacts.detect(&"is_#{role}?".to_sym)
                                    -unless ct.blank?
                                      %ul
                                        %li #{ct.first_name} #{ct.last_name}
                                        %li=link_to "#{ct.email}","mailto:#{ct.email}"
                                    -else
                                      none
                              -unless  cc.blank?
                                %li
                                  =link_to 'create/edit contacts', certificate_content_contacts_url(@ssl_slug, cc)
                        .certificate_details_box
                          %ul
                            -if co.certificate_content.issued? && !co.certificate_content.expired?
                              =render partial: 'download', locals: {co: co}
                            -unless cc.csr.blank? || hide_validation?(co)
                              -if cc.pending_validation?
                                %li
                                  %strong domain validation
                                =render partial: 'validations/dcv', locals: {co: co}
                              -unless co.certificate.is_dv_or_basic?
                                %li
                                  %strong validation documentation
                                -if co.description['validation_level'] == 'Class 1'
                                  %li
                                    %em n/a
                                -else
                                  -unless co.validation.validation_histories.blank?
                                    -co.validation.validation_histories.each do |vh|
                                      %li
                                        =link_to image_tag('preview.png', :class=>'blue_icon'), URI.encode(vh.document_url(:preview)), :rel=>'prettyPhoto'
                                        =link_to image_tag('download.png', :class=>'blue_icon'), URI.encode(vh.document_url), target: "_blank"
                                        =vh.document_file_name.shorten(20, false)
                                  -else
                                    %li
                                      %em none submitted
                                  %li.category_border
                                    -unless cc.blank? || cc.new? || cc.csr_submitted? || cc.info_provided? || co.expired?
                                      -unless co.validation_rules_satisfied? || co.certificate_content.expired?
                                        -ul=link_to 'upload', document_upload_certificate_order_validation_url(certificate_order_id: co.ref)
                                      -unless co.validation.validation_histories.blank?
                                        -m=link_to 'manage', edit_certificate_order_validation_url(certificate_order_id: co.ref)
                                      -s=link_to 'status', certificate_order_validation_url(certificate_order_id: co.ref)
                                      =link_cluster([ul,m,s])
                            -if cn  and !co.certificate.is_code_signing?
                              =render partial: 'visit', locals: {cn: cn}
                            -if cc.server_software
                              %li
                                %strong server software
                              %li.category_border
                                #{cc.server_software.title}
                            =render partial: 'shared/small_admin_functions', locals: {co: co}
