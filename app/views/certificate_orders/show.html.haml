-show_folders = current_user && Folder.show_folders?(current_user)
-title = "#{@certificate_order.certificate.product_root.humanize} Certificate For #{@certificate_order.subject}"
-co = @certificate_order
-cn = co.subject
-@cc = co.certificate_content
-@meta = [["ROBOTS", "NOINDEX, NOFOLLOW"]]
=render 'index_scripts'
=render 'show_scripts'
= javascript_include_tag 'psl.min'
-content_for :title, title
-if params[:checkout] && co.certificate_content.pending_validation?
  -i=adjusted_position(7, co)
=order_progress_indicator(i, co.certificate) unless i.blank?
-token=co.physical_tokens.last
-if token.try("in_transit?".to_sym)
  -flash.now[:warning] = "Token #{token.name} has shipped with tracking number #{token.tracking_number}!" if co.certificate.is_evcs? and !co.physical_tokens.blank?
=render :partial=>'quick_links'

#send_notify.hidden
  =form_tag nil, :id=>'send_notify_form', :method=>:post do
    =hidden_field_tag :certificate_order_ref
    =hidden_field_tag :notify_type
    - if current_user.is_standard? && current_user.ssl_account.epki_registrant && @certificate_order.ssl_account.epki_registrant
      =hidden_field_tag :is_epki_admin, true
      =hidden_field_tag :send_email_link
      =hidden_field_tag :copy_act_link
    - else
      =hidden_field_tag :is_epki_admin, false

#certificate_orders
  %table(cellspacing="0")
    %caption
      #{@certificate_order.certificate.product_root.humanize} Certificate For
      %span.common_name
        #{cn}
      -if permitted_to?(:update, @certificate_order)
        -team_iv = @certificate_order.get_team_iv
        -link_text = team_iv.nil? ? " [how do I use this page?]" : " #{team_iv.first_name} #{team_iv.last_name}"
        =link_to "[how do I use this page?]", "https://#{Settings.portal_domain}/article/certificate-order-page-information/"
    %tr.heading_row
      %th(scope="col") Subject
      -if show_folders
        %th(scope="col") Folder
      %th(scope="col") Status
      %th(scope="col") Order Date
      %th(scope="col") Expires
      %th(scope="col") Action
    %tr
      %td.name.not_expandable
        .subject_column.center_subject
          =render :partial=>'/certificate_orders/subject_column', :locals=>{:certificate_order=>@certificate_order, :single=>true}
      -if show_folders
        %td.co-folder-name
          -if co.folder
            %i.fa.fa-folder-open.icon-co-add-folder{id: co.ref, data: {folder_id: co.folder.try(:id), folder_name: co.folder.try(:name)}}
          -else
            %i.fa.fa-plus.icon-co-add-folder{id: co.ref}
      %td(class="#{status_class(@cc)}")
        #{certificate_order_status(@cc,co)}
      %td
        =@certificate_order.orders.first.created_at.strftime("%b %d, %Y")
      %td(class="#{expires_on_class(@cc,co)}")
        %span.expires_on=expires_on(@cc)
      %td.ssl_action=action(@certificate_order)
    %tr.expanded
      %td(colspan="#{show_folders ? 6 : 5}")
        .certificate_details
          =render :partial=>'/certificate_orders/menu', :locals=>{:co=>@certificate_order}
          =render :partial=>'/certificate_orders/co', :object=>@certificate_order
          -if permitted_to?(:update, @certificate_order)
            %table(cellspacing="0")
              %tbody
                %tr
                  %td(colspan="5")
                    .certificate_details_box
                      %ul
                        -unless co.certificate.admin_submit_csr?
                          -if @cc.csr.blank?
                            %li
                              %em waiting for input
                          -else
                            -fields = (@cc.csr.signed_certificate.blank?)? @cc.csr : @cc.csr.signed_certificate
                            %li
                              %strong
                                =fields.is_a?(Csr) ? "csr" : "certificate"
                                contents
                            -unless @cc.csr.signed_certificate
                              -unless fields.organization.blank?
                                %li
                                  organization:
                                  %span.organization
                                    \#{fields.organization}
                              -unless (ou=fields.organization_unit).blank?
                                %li
                                  department:
                                  %div.department
                                    -unless ou.is_a? Array
                                      \#{fields.organization_unit}
                                    -else
                                      %ul
                                        -ou.each do |u|
                                          %li
                                            =u
                              -unless fields.locality.blank?
                                %li
                                  city:
                                  %span.city
                                    \#{fields.locality}
                              -unless fields.state.blank?
                                %li
                                  state:
                                  %span.state
                                    \#{fields.state}
                              -unless fields.country.blank?
                                %li
                                  country:
                                  %span.country
                                    \#{fields.country}
                            -else
                              -#%li
                              -#  expires:
                              -#  %span.country
                              -#    \#{fields.expiration_date.strftime("%b %d, %Y")}
                              -#%li
                              -#  remaining days:
                              -#  %span.country
                              -#    \#{fields.remaining_days(true)}
                              %li
                                algorithm:
                                %span.country
                                  \#{fields.signature_algorithm}
                                  -if fields.is_SHA1?
                                    =link_to "(SHA2 upgrade)", reprocess_certificate_order_url(co)
                            %li.category_border
                        -if current_user.is_super_user?
                          -is_smime_or_client = @certificate_order.certificate.is_smime_or_client?
                          %li
                            %strong validation status
                          %li.li-cert-validate
                            -if current_user.is_super_user?
                              -require_ov = @certificate_order.certificate.requires_locked_registrant?
                              -if require_ov && !@certificate_order.ov_validated?
                                = link_to "<i class='fa fa-expeditedssl'></i> Validate OV".html_safe,                      |
                                admin_update_certificate_order_path(@ssl_slug, @certificate_order.ref, validate_ov: true), |
                                method: :put, class: 'btn-cert-validate'
                                %br/
                              -if require_ov && @certificate_order.ov_validated?
                                - Contact::statuses.keys.each do |key|
                                  - if key != 'validated'
                                    = link_to "<i class='fa fa-expeditedssl'></i> OV #{key.humanize}".html_safe,                                       |
                                    admin_update_certificate_order_path(@ssl_slug, @certificate_order.ref, unvalidate_ov: true, unvalidate_type: key), |
                                    method: :put, class: 'btn-cert-validate'
                                    %br/
                                %br/
                            -if is_smime_or_client
                              -if !@certificate_order.iv_validated?
                                = link_to "<i class='fa fa-expeditedssl'></i> Validate IV".html_safe,                      |
                                admin_update_certificate_order_path(@ssl_slug, @certificate_order.ref, validate_iv: true), |
                                method: :put, class: 'btn-cert-validate'
                                %br/
                              -else
                                - Contact::statuses.keys.each do |key|
                                  - if key != 'validated'
                                    = link_to "<i class='fa fa-expeditedssl'></i> IV #{key.humanize}".html_safe,                                       |
                                    admin_update_certificate_order_path(@ssl_slug, @certificate_order.ref, unvalidate_iv: true, unvalidate_type: key), |
                                    method: :put, class: 'btn-cert-validate'
                                    %br/
                        -unless @certificate_order.certificate.is_dv?
                          %li
                            %strong validation documentation
                          -unless @certificate_order.validation.validation_histories.blank?
                            -@certificate_order.validation.validation_histories.each do |vh|
                              %li
                                - if vh.document_content_type =~ %r(image)
                                  =link_to image_tag('preview.png', :class=>'blue_icon'), vh.document_url(:preview), :rel=>'prettyPhoto'
                                =link_to image_tag('download.png', :class=>'blue_icon'), vh.document_url
                                =vh.document_file_name.shorten(20, false)
                          -else
                            %li
                              %em none submitted
                          %li.category_border
                            -unless @cc.blank? || @cc.new? || @cc.csr_submitted? || @cc.info_provided? || co.expired?
                              -unless co.validation_rules_satisfied? || co.certificate_content.expired?
                                -u=link_to 'upload', document_upload_certificate_order_validation_url(certificate_order_id: co.ref)
                              -unless co.validation.validation_histories.blank?
                                -m=link_to 'manage', edit_certificate_order_validation_url(certificate_order_id: co.ref)
                              -s=link_to 'status', certificate_order_validation_url(certificate_order_id: co.ref)
                              =link_cluster([u,m,s])
                        -if cn and !co.certificate.is_csr_last_step?
                          =render partial: 'certificate_orders/visit', locals: {cn: cn}
                        -if current_user.is_system_admins? && (!co.external_order_number.blank? || co.certificate_content.ca_id.blank?)
                          %li
                            %strong switch from comodo
                          %li.category_border
                            =link_to "convert to SSL.com chain", nil, :class => "switch_from_comodo"
                        %li.category_border
                        %li
                          %strong for developers
                        %li=link_to "preformatted api strings", developer_certificate_order_path(@ssl_slug, co)
                        %li=link_to "developer tools", is_sandbox? ? developers_certificate_orders_url : "https://sandbox.ssl.com"
                        =render partial: "certificate_orders/duration_limit", locals:{co: @certificate_order}
                    .certificate_details_box
                      %ul
                        -team_iv = co.get_team_iv(:for_assignee)
                        -team_lr = co.locked_recipient
                        -unless team_iv.nil?
                          %li
                            %strong recipient
                          %li #{team_iv.first_name}, #{team_iv.last_name}
                          %li #{team_iv.email}
                          %li
                            =link_to 'edit recipient', recipient_certificate_order_path(@ssl_slug, @certificate_order.ref)
                          -if team_lr and current_user.is_system_admins?
                            %li
                              %br/
                            %li
                              %strong locked recipient (#{team_lr.status.humanize})
                            %li
                              #{team_lr.first_name}, #{team_lr.last_name}
                            %li
                              #{team_lr.email}
                            -if current_user.is_system_admins?
                              %li
                                =link_to 'edit locked recipient', recipient_certificate_order_path(@ssl_slug, @certificate_order.ref, locked_recipient: true)
                          %li 
                            %br/
                        %li
                          %strong registrant
                        -unless @cc.registrant.blank? || (!current_user.is_system_admins? && @certificate_order.ov_validated?)
                          -r = @cc.registrant
                          %li
                            =r.company_name
                          -unless r.department.blank?
                            %li
                              =r.department
                          -unless r.po_box.blank?
                            %li
                              =r.po_box
                          -unless r.address1.blank?
                            %li
                              =r.address1
                          -unless r.address2.blank?
                            %li
                              =r.address2
                          -unless r.address3.blank?
                            %li
                              =r.address3
                          %li
                            \#{[r.city, r.state, r.postal_code].join(', ')}
                          -unless r.country.blank?
                            %li
                              =r.country
                          -unless r.email.blank?
                            %li
                              =r.email
                          -#-if current_user.is_system_admins?
                          -if !co.certificate.is_csr_last_step? || (co.certificate.is_csr_last_step? && !current_user.is_system_admins?)
                            %li
                              =link_to 'edit registrant', edit_certificate_order_url(id: @certificate_order.ref, registrant: true)
                        -else
                          %li
                            -if @cc.workflow_state=="csr_submitted"
                              =link_to 'provide info (required)', edit_certificate_order_path(@certificate_order)
                            -else
                              none
                        -if co.certificate_content.subject_dn
                          %li.category_border
                          %li
                            %strong subject dn
                          -co.certificate_content.subject_dn.split(',').each do |s|
                            %li=s
                          %li
                            -if @cc.workflow_state=="csr_submitted"
                              none
                            -elsif current_user.is_system_admins?
                              =link_to 'edit locked registrant', edit_certificate_order_url(id: @certificate_order.ref, registrant: false)
                        -if current_user.is_admin? && @cc.locked_registrant
                          %li.category_border
                          %li.domains_category
                            %strong domains
                            =text_field_tag 'hidden_locked_reg_domains', @cc.locked_registrant.domains ? @cc.locked_registrant.domains.join(' ') : '', :type => 'hidden'
                          -if @cc.locked_registrant.domains
                            -@cc.locked_registrant.domains.each do |domain|
                              %li.domains_category_domain=domain
                          -else
                            %li.domains_category_domain none
                          %li.domains_category_action
                            =link_to 'edit domains', register_domains_certificate_order_path(@ssl_slug, @certificate_order.ref), :class => 'edit_locked_registrant_domains'
                        -unless @certificate_order.physical_tokens.active.blank?
                          %li.category_border
                          %li
                            %strong physical tokens
                          -@certificate_order.physical_tokens.active.each do |token|
                            -display="#{token.model_number}"+(token.name.blank? ? '' : " (#{token.name.shorten(5,false)})")
                            %li=display
                            -unless token.in_possession?
                              %ul
                                %li
                                  %a{style:"cursor: pointer;", onclick: "activate_physical_token('#{@certificate_order.ref}','#{token.id}','#{token.name}')"}="activate"
                                  -if current_user.is_system_admins?
                                    |
                                    =link_to "edit", edit_certificate_order_physical_token_path(@certificate_order.ref,token)
                                    |
                                    =link_to "delete", certificate_order_physical_token_path(@certificate_order.ref,token), method: :delete,
                                      data: {confirm: 'Are you sure you want to delete this token?'}
                              -if (token.in_transit? || token.not_yet_shipped?) and !token.tracking_number.blank?
                                %ul
                                  %li=link_to "#{token.shipping_method}: #{token.tracking_number}"
                            -else
                              %ul
                                %li Serial - #{token.serial_number}
                                %li Activation PIN - #{token.activation_pin}
                                %li Admin PIN - #{token.admin_pin}
                    .certificate_details_box
                      %ul
                        -if co.certificate_content.issued? && !co.certificate_content.expired?
                          -#=render partial: 'download', locals: {csr: co.csr, signed_certificate: co.signed_certificate}
                          =render partial: 'download', locals: {certificate_order: co}
                        -unless @cc.csr.blank? || hide_validation?(co)
                          -if @cc.pending_validation?
                            %li
                              %strong domain validation
                            =render partial: 'validations/dcv', locals: {co: co}
                        =render partial: 'shared/small_admin_functions', locals: {co: co}
            %table(cellspacing="0")
              %tbody
                %tr
                  -if current_user.is_system_admins?
                    %td(colspan="4")
                      .notes_box
                        =form_for @certificate_order, :url=>admin_update_certificate_order_url(@certificate_order) do |f|
                          %ul
                            %li
                              %strong notes for admins only
                            %li
                              =f.text_area :notes, cols: 40, rows: 10
                    %td(colspan="5")  
                      .certificate_details_box
                        %strong audit log
                        -audits=(@certificate_order.system_audits.empty? ? "n/a" : "###")+"\n"
                        -@certificate_order.system_audits.includes{owner(User)}.each do |audit|
                          -audits << "date: #{audit.created_at}\nuser: #{audit.owner.try :login}\naction: #{audit.action}\n###\n"
                        =text_area_tag :audits, audits, :size=>"30x10"

                  -unless @cc.certificate_contacts.blank?
                    -CertificateContent::CONTACT_ROLES.each do |role|
                      .contact_details_box
                        %ul
                          %li
                            %strong
                              \#{role} contact
                          -@cc.certificate_contacts.where("roles LIKE ?", "%#{role}%").each_with_index do |ct, i|
                            %li{class: 'cc-contacts-index'}=i+1
                            %li=ct.first_name+" "+ct.last_name
                            -unless ct.po_box.blank?
                              %li=ct.po_box
                            -unless ct.address1.blank?
                              %li=ct.address1
                            -unless ct.address2.blank?
                              %li=ct.address2
                            -unless ct.address3.blank?
                              %li=ct.address3
                            -csp = [ct.city, ct.state, ct.postal_code].reject(&:blank?).join(', ')
                            -unless csp.blank?
                              %li= csp
                            -unless ct.country.blank?
                              %li=ct.country
                            -unless ct.email.blank?
                              %li=link_to "#{ct.email}","mailto:#{ct.email}"
                            -unless ct.phone.blank?
                              %li=ct.phone
                            %li
                              =link_to 'create/edit contacts', certificate_content_contacts_path(@ssl_slug, @cc)
                            %br
            %table(cellspacing="0")
              %tbody
                %tr
                  %td
                    = render partial: 'tags/certificate_order_tags'
            -unless @certificate_order.certificate_contents.count == 1 && @certificate_order.certificate_content.csr.nil?
              %table(cellspacing="0")
                %tbody
                  -@certificate_order.certificate_contents.order('created_at DESC').each do |c|
                    -current = c==@certificate_order.certificate_content
                    -csr = c.csr
                    %tr
                      %td(colspan="5" style="text-align: left;")
                        -unless co.certificate.is_csr_last_step?
                          %span.previous_requests
                            reference: #{c.ref}
                            -if current_user.is_admin? and c.ca_id
                              %br
                              ejbca_username: #{c.label}
                        -if csr
                          -show_block = ->(sc) do
                            - unless sc.nil? || @certificate_order.certificate.is_csr_last_step?
                              %tr#cert-content-status
                                %td
                                  -if sc.revocation
                                    %p.align-left.error
                                      !IMPORTANT! Certificate with
                                      %a{:href => "##{sc.serial}"}
                                        (serial: #{sc.serial})
                                      has been revoked on April 6, 2019. Please install renewal certificate
                                      %a{:href => "##{sc.replacement.serial}"}
                                        (serial: #{sc.replacement.serial})
                                      immediately to avoid downtime.
                                      %br
                                      Please refer to this #{link_to "serial number entropy FAQ", "https://#{Settings.portal_domain}/faqs/faq-what-is-the-serial-number-entropy-issue-im-hearing-about/"} for more details.
                                  -if sc.try(:body).blank?
                                    (server software: #{c.server_software.try :title})
                                  -else
                                    %a{:name => "#{sc.serial}", :href => "##{sc.serial}"}
                                      (serial number: #{sc.serial})
                                  %div
                                    %strong
                                      %i{class: 'fa fa-cogs'}
                                      status:
                                    - if sc.revoked?
                                      - sys_log = sc.system_audits.where("system_audits.notes LIKE ?", "%revoked%").last
                                      - if sys_log
                                        %span REVOKED on #{sys_log.created_at.strftime('%F')} by #{sys_log.owner.email}

                                    - unless sys_log
                                      %span
                                        =sc.status.upcase

                                    - if !sc.revoked?
                                      - select_id = "sel-cert-content-revoke-#{sc.id}"
                                      - dialog_id = "dialog-form-#{sc.id}"
                                      = link_to "<i class='fa fa-times-circle'></i> REVOKE".html_safe, '#',
                                        class: 'btn-cert-content-revoke', data: {select_id: select_id, dialog_id: dialog_id}
                                      %div{id: dialog_id, class: 'hidden'}
                                        %p Please select a reason for revoking:
                                        %br/
                                        .clearfix
                                          = form_tag revoke_signed_certificate_path(@ssl_slug, sc.id), method: :put do
                                            = select_tag :revoke_reason, options_for_select(SslcomCaRevocationRequest::REASONS),
                                              multiple: false, id: select_id, include_blank: false
                                        .clearfix
                                          %br/
                                          %p *Warning: Once revoked the status of this signed certificate cannot be reversed.
                            %tr
                              %td(colspan="5")
                                .certificate_details_box
                                  %strong certificate signing request
                                  -unless permitted_to?(:create, SignedCertificate.new) && current
                                    -unless csr.blank?
                                      %div submitted on #{csr.created_at.strftime("%b %d, %Y %R %Z")}
                                      =text_area_tag :csr, csr.body, :size=>"30x10"
                                      signature algorithm: #{csr.sig_alg}
                                    -else
                                      no certificate signing request found
                                  -else
                                    #csr_submitted_on
                                      %span.submitted_on
                                        -unless csr.try(:created_at).blank?
                                          submitted on #{csr.created_at.strftime("%b %d, %Y %R %Z")}
                                        -else
                                          &nbsp
                                    =form_for csr do |f|
                                      =f.text_area :body, :cols=>30, :rows=>10
                                      -if csr.try :sig_alg
                                        %div signature algorithm:
                                        %div=csr.sig_alg
                                      .clearfix
                                      =submit_tag 'Submit csr', :class=> 'submit_signed_certificate'
                                      =image_tag('waiting_bar_medium.gif', :id=>'waiting_on_csr', :style=>'display:none;vertical-align: middle;')
                                      #temporary_csr.hidden[csr, :new]
                                        =text_area_tag :tmp_csr, csr.try(:body)
                                .certificate_details_box
                                  %strong signed certificate
                                  -unless co.certificate_content.ca_id.blank?
                                    %ul
                                      -if sc && !sc.expired?
                                        %div
                                          submitted on #{sc.created_at.strftime("%b %d, %Y %R %Z")}
                                        -#=render partial: 'download', locals: {csr: csr, signed_certificate: sc}
                                        =render partial: 'download', locals: {certificate_order: co}
                                      -else
                                        %div
                                          no signed certificate found
                                  -else
                                    -unless permitted_to?(:create, SignedCertificate.new) && current
                                      -unless sc.try(:body).blank?
                                        %div
                                          submitted on #{sc.created_at.strftime("%b %d, %Y %R %Z")}
                                        =text_area_tag :signed_certificate, sc.body, :size=>"30x10"
                                        -if sc.try :signature_algorithm
                                          %div signature algorithm:
                                          %div=sc.signature_algorithm
                                      -else
                                        %div
                                          no signed certificate found
                                    -else
                                      #signed_certificate_submitted_on
                                        %span.submitted_on
                                          -unless sc.try(:created_at).blank?
                                            submitted on #{sc.created_at.strftime("%b %d, %Y %R %Z")}
                                          -else
                                            &nbsp
                                      =form_for SignedCertificate.new, :url=>csr_signed_certificates_path(csr) do |f|
                                        =f.text_area :body, :cols=>30, :rows=>10
                                        -if sc.try :signature_algorithm
                                          %div signature algorithm:
                                          %div=sc.signature_algorithm
                                        .clearfix
                                          #{check_box_tag "email_customer", true, true}notify customer?
                                        =submit_tag 'Submit certificate', :class=> 'submit_signed_certificate'
                                        =image_tag('waiting_bar_medium.gif', :id=>'waiting_bar', :style=>'display:none;vertical-align: middle;')
                                        #temporary_signed_certificate.hidden[csr]
                                          =text_area_tag :tmp_signed_certificate, sc.try(:body)
                                .certificate_details_box
                                  -unless sc.try(:body).blank?
                                    -if co.certificate.is_csr_last_step?
                                      %strong parsed certificate
                                      %div
                                        issued to: #{sc.common_name}
                                      %textarea.selectAll{cols: 30, rows: 10}=sc.decoded
                                    -else
                                      -san = sc.subject_alternative_names
                                      %strong parsed certificate
                                      %div
                                        =san ? "DOMAINS (#{san.count})" : 'DOMAINS'
                                      %textarea.selectAll{cols: 10, rows: 5}=san ? san.join("\n") : ""
                                      %div
                                        DECODED
                                      %textarea.selectAll{cols: 10, rows: 4}=sc.decoded
                          -certs=csr.signed_certificates.includes(:revocation).order('created_at DESC')
                          -if certs.blank?
                            -show_block.call(nil)
                          -else
                            -csr.signed_certificates.includes(:revocation).order('created_at DESC').each do |sc|
                              -show_block.call(sc)
                        %tr
                          %td(colspan="5" style="text-align: left;")
                            = render partial: '/tags/certificate_content_tags', locals: {taggable: c}
:javascript
  jQuery(function($) {
    var curDialog;

    function revokeSignedCertificate() {
      curDialog.find('form').submit();
    }
    
    function setupDialog(dialog_id) {
      curDialog = $('#' + dialog_id);
      curDialog.dialog({
        position: { my: 'top center', at: 'top center', of: window },
        title: 'Revoke Signed Certificate',
        autoOpen: false,
        height: 240,
        width: 300,
        modal: true,
        dialogClass: 'dl-transfer-team',
        buttons: {
          Cancel: function() {
            curDialog.dialog('close');
          },
          'Revoke': revokeSignedCertificate,
        }
      });
    }
    
    $('.btn-cert-content-revoke').on('click', function(e) {
      e.preventDefault();
      setupDialog($(this).data('dialog-id'));
      $($(this).data('select-id')).select2();
      
      curDialog.dialog('open');
    });
  });

-if show_folders
  = render partial: '/folders/folder_tree_modal'

#domain_modal.domain-modal
  #domain_modal_content.modal-content
    #domain_modal_header.modal-header
      %span#domain_modal_close.close
        &times;
      %p
        Domains (newline and whitespace separated)
    #domain_modal_body.modal-body
      = text_area_tag 'locked_reg_domains', nil, :rows => '5'
      #required-valid
        * All Domains should be valid!
    #domain_modal_footer.modal-footer
      = button_tag 'Save', :type => 'button', :class => 'btn btn-grey btn-save-domains', :disabled => true

#epki_admin_modal.epki_admin_modal
  #epki_admin_modal_content.modal-content
    #epki_admin_modal_header.modal-header
      %span#epki_admin_modal_close.close
        &times;
      %p
        Please choose options
    #epki_admin_modal_body.modal-body
      .method_block.send_email_method.clearfix
        .block_chk
          = check_box_tag 'chk_send_email', true, true, :class => 'chk_method'
        .block_label
          %span.chk_send_label
      .method_block.copy_link_method.clearfix
        .block_chk
          = check_box_tag 'chk_copy_link', true, false, :class => 'chk_method'
        .block_label
          %span View activation link
      #required-field
        * It needs to choose one method at least!
    #epki_admin_modal_footer.modal-footer
      = button_tag 'OK', :type => 'button', :class => 'btn btn-grey btn-ok'

#epki_activation_link_modal.epki_activation_link_modal
  #epki_activation_link_modal_content.modal-content
    #epki_activation_link_modal_header.modal-header
      %span#epki_activation_link_modal_close.close
        &times;
      %p
        Activation Link
    #epki_activation_link_modal_body.modal-body
      .method_block.clearfix
        = text_field_tag :activation_link, '', :readonly => true
        %span.copy_activation_link{:title => 'Clipboard'}
          %i.fa.fa-clipboard
    #epki_activation_link_modal_footer.modal-footer
      = button_tag 'OK', :type => 'button', :class => 'btn btn-grey btn-activation-link-ok'
