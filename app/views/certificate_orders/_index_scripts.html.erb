<script type="text/javascript">
function activate_physical_token(certificate_order_ref, physical_token_id, name) {
  var serial = prompt("Please enter the serial number of token "+name, '');
  if (serial == null || serial=="")
    return;
  else
    window.location = '/certificate_orders/'+certificate_order_ref+'/physical_tokens/'+physical_token_id+'/activate?serial='+encodeURIComponent(serial);
}

function destroy_cert_download_link(event) {
  document.body.removeChild(event.target);
}

function cert_download(cert, name) {
  var certAsBlob = new Blob([cert], { type: "application/x-x509-user-cert" });
  var downloadLink = document.createElement('a');
  downloadLink.download = name;
  downloadLink.innerHTML = "Download File";

  downloadLink.href = window.URL.createObjectURL(certAsBlob);
  downloadLink.onclick = destroy_cert_download_link;
  downloadLink.style.display = "none";
  document.body.appendChild(downloadLink);

  downloadLink.click();
}

function b64toBlob(b64Data, contentType, sliceSize) {
  contentType = contentType || '';
  sliceSize = sliceSize || 512;

  var byteCharacters = atob(b64Data);
  var byteArrays = [];

  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);

    var byteNumbers = new Array(slice.length);
    for (var i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    var byteArray = new Uint8Array(byteNumbers);

    byteArrays.push(byteArray);
  }

  var blob = new Blob(byteArrays, {type: contentType});
  return blob;
}

function pfx_download(p12b64, name) {
  var downloadLink = document.createElement('a');
  if (name === '') {
    downloadLink.download = 'sslcom_cert.p12';
  } else {
    downloadLink.download = name.substr(0, name.length - 4) + '.p12';
  }
  downloadLink.innerHTML = "Download File";

  /*downloadLink.href = 'data:application/x-pkcs12;base64,' + p12b64;*/
  var pkcs12AsBlob = b64toBlob(p12b64, 'application/x-pkcs12');
  downloadLink.href = window.URL.createObjectURL(pkcs12AsBlob);
  downloadLink.onclick = destroy_cert_download_link;
  downloadLink.style.display = "none";
  document.body.appendChild(downloadLink);

  downloadLink.click();
}

toPkcs12Asn1 = function(key, cert, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';

  if (!('useMac' in options)) {
    options.useMac = true;
  }
  if (!('localKeyId' in options)) {
    options.localKeyId = null;
  }
  if (!('generateLocalKeyId' in options)) {
    options.generateLocalKeyId = true;
  }

  var localKeyId = options.localKeyId;
  var bagAttrs;

  if (localKeyId !== null) {
    localKeyId = forge.util.hexToBytes(localKeyId);
  } else if (options.generateLocalKeyId) {
    // use SHA-1 of paired cert, if available
    if (cert) {
      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
      /*if (typeof pairedCert === 'string') {
        pairedCert = forge.pki.certificateFromPem(pairedCert);
      }*/

      var sha1 = forge.md.sha1.create();
      /*sha1.update(forge.asn1.toDer(forge.pki.certificateToAsn1(pairedCert)).getBytes());*/
      sha1.update(forge.pem.decode(cert)[0].body);
      localKeyId = sha1.digest().getBytes();
    } else {
      // FIXME: consider using SHA-1 of public key (which can be generated
      // from private key components), see: cert.generateSubjectKeyIdentifier
      // generate random bytes
      localKeyId = forge.random.getBytes(20);
    }
  }

  var attrs = [];
  if (localKeyId !== null) {
    attrs.push(
      // localKeyID
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // attrId
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            forge.asn1.oidToDer(forge.pki.oids.localKeyId).getBytes()
          ),
          // attrValues
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.SET,
            true,
            [
              forge.asn1.create(
                forge.asn1.Class.UNIVERSAL,
                forge.asn1.Type.OCTETSTRING,
                false,
                localKeyId
              )
            ]
          )
        ]
      )
    );
  }

  if ('friendlyName' in options) {
    attrs.push(
      // friendlyName
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // attrId
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            forge.asn1.oidToDer(forge.pki.oids.friendlyName).getBytes()
          ),
          // attrValues
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.SET,
            true,
            [
              forge.asn1.create(
                forge.asn1.Class.UNIVERSAL,
                forge.asn1.Type.BMPSTRING,
                false,
                options.friendlyName
              )
            ]
          )
        ]
      )
    );
  }

  if (attrs.length > 0) {
    bagAttrs = forge.asn1.create(
      forge.asn1.Class.UNIVERSAL,
      forge.asn1.Type.SET,
      true,
      attrs
    );
  }

  // collect contents for AuthenticatedSafe
  var contents = [];

  // create safe bag(s) for certificate chain
  var chain = [];
  if (cert !== null) {
    if (forge.util.isArray(cert)) {
      chain = cert;
    } else {
      chain = [cert];
    }
  }

  var certSafeBags = [];
  for (var i = 0; i < chain.length; ++i) {
    // convert cert from PEM as necessary
    cert = chain[i];
    /*if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }*/

    // SafeBag
    var certBagAttrs = (i === 0) ? bagAttrs : undefined;
    /*var certAsn1 = forge.pki.certificateToAsn1(cert);*/
    var certAsn1 = forge.asn1.fromDer(forge.pem.decode(cert)[0].body);
    var certSafeBag = forge.asn1.create(
      forge.asn1.Class.UNIVERSAL,
      forge.asn1.Type.SEQUENCE,
      true,
      [
        // bagId
        forge.asn1.create(
          forge.asn1.Class.UNIVERSAL,
          forge.asn1.Type.OID,
          false,
          forge.asn1.oidToDer(forge.pki.oids.certBag).getBytes()
        ),
        // bagValue
        forge.asn1.create(
          forge.asn1.Class.CONTEXT_SPECIFIC,
          0,
          true,
          [
            // CertBag
            forge.asn1.create(
              forge.asn1.Class.UNIVERSAL,
              forge.asn1.Type.SEQUENCE,
              true,
              [
                // certId
                forge.asn1.create(
                  forge.asn1.Class.UNIVERSAL,
                  forge.asn1.Type.OID,
                  false,
                  forge.asn1.oidToDer(forge.pki.oids.x509Certificate).getBytes()
                ),
                // certValue (x509Certificate)
                forge.asn1.create(
                  forge.asn1.Class.CONTEXT_SPECIFIC,
                  0,
                  true,
                  [
                    forge.asn1.create(
                      forge.asn1.Class.UNIVERSAL,
                      forge.asn1.Type.OCTETSTRING,
                      false,
                      forge.asn1.toDer(certAsn1).getBytes()
                    )
                  ]
                )
              ]
            )
          ]
        ),
        // bagAttributes (OPTIONAL)
        certBagAttrs
      ]
    );
    certSafeBags.push(certSafeBag);
  }

  if (certSafeBags.length > 0) {
    // SafeContents
    var certSafeContents = forge.asn1.create(
      forge.asn1.Class.UNIVERSAL,
      forge.asn1.Type.SEQUENCE,
      true,
      certSafeBags
    );

    // ContentInfo
    var certCI =
      // PKCS#7 ContentInfo
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // contentType
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            // OID for the content type is 'data'
            forge.asn1.oidToDer(forge.pki.oids.data).getBytes()
          ),
          // content
          forge.asn1.create(
            forge.asn1.Class.CONTEXT_SPECIFIC,
            0,
            true,
            [
              forge.asn1.create(
                forge.asn1.Class.UNIVERSAL,
                forge.asn1.Type.OCTETSTRING,
                false,
                forge.asn1.toDer(certSafeContents).getBytes()
              )
            ]
          )
        ]
      );
    contents.push(certCI);
  }

  // create safe contents for private key
  var keyBag = null;
  if (key !== null) {
    // SafeBag
    /*var pkAsn1 = forge.pki.wrapRsaPrivateKey(forge.pki.privateKeyToAsn1(key));*/
    var pkAsn1 = forge.asn1.fromDer(forge.pem.decode(key)[0].body);
    if (password === null) {
      // no encryption
      keyBag = forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // bagId
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            forge.asn1.oidToDer(forge.pki.oids.keyBag).getBytes()
          ),
          // bagValue
          forge.asn1.create(
            forge.asn1.Class.CONTEXT_SPECIFIC,
            0,
            true,
            [
              // PrivateKeyInfo
              pkAsn1
            ]
          ),
          // bagAttributes (OPTIONAL)
          bagAttrs
        ]
      );
    } else {
      // encrypted PrivateKeyInfo
      keyBag = forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // bagId
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            forge.asn1.oidToDer(forge.pki.oids.pkcs8ShroudedKeyBag).getBytes()
          ),
          // bagValue
          forge.asn1.create(
            forge.asn1.Class.CONTEXT_SPECIFIC,
            0,
            true,
            [
              // EncryptedPrivateKeyInfo
              forge.pki.encryptPrivateKeyInfo(pkAsn1, password, options)
            ]
          ),
          // bagAttributes (OPTIONAL)
          bagAttrs
        ]
      );
    }

    // SafeContents
    var keySafeContents = forge.asn1.create(
      forge.asn1.Class.UNIVERSAL,
      forge.asn1.Type.SEQUENCE,
      true,
      [keyBag]
    );

    // ContentInfo
    var keyCI =
      // PKCS#7 ContentInfo
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // contentType
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            // OID for the content type is 'data'
            forge.asn1.oidToDer(forge.pki.oids.data).getBytes()
          ),
          // content
          forge.asn1.create(
            forge.asn1.Class.CONTEXT_SPECIFIC,
            0,
            true,
            [
              forge.asn1.create(
                forge.asn1.Class.UNIVERSAL,
                forge.asn1.Type.OCTETSTRING,
                false,
                forge.asn1.toDer(keySafeContents).getBytes()
              )
            ]
          )
        ]
      );
    contents.push(keyCI);
  }

  // create AuthenticatedSafe by stringing together the contents
  var safe = forge.asn1.create(
    forge.asn1.Class.UNIVERSAL,
    forge.asn1.Type.SEQUENCE,
    true,
    contents
  );

  var macData;
  if (options.useMac) {
    // MacData
    var sha1 = forge.md.sha1.create();
    var macSalt = new forge.util.ByteBuffer(
      forge.random.getBytes(options.saltSize)
    );
    var count = options.count;
    // 160-bit key
    var key = forge.pkcs12.generateKey(password, macSalt, 3, count, 20);
    var mac = forge.hmac.create();
    mac.start(sha1, key);
    mac.update(forge.asn1.toDer(safe).getBytes());
    var macValue = mac.getMac();
    macData = forge.asn1.create(
      forge.asn1.Class.UNIVERSAL,
      forge.asn1.Type.SEQUENCE,
      true,
      [
        // mac DigestInfo
        forge.asn1.create(
          forge.asn1.Class.UNIVERSAL,
          forge.asn1.Type.SEQUENCE,
          true,
          [
            // digestAlgorithm
            forge.asn1.create(
              forge.asn1.Class.UNIVERSAL,
              forge.asn1.Type.SEQUENCE,
              true,
              [
                // algorithm = SHA-1
                forge.asn1.create(
                  forge.asn1.Class.UNIVERSAL,
                  forge.asn1.Type.OID,
                  false,
                  forge.asn1.oidToDer(forge.pki.oids.sha1).getBytes()
                ),
                // parameters = Null
                forge.asn1.create(
                  forge.asn1.Class.UNIVERSAL,
                  forge.asn1.Type.NULL,
                  false,
                  ''
                )
              ]
            ),
            // digest
            forge.asn1.create(
              forge.asn1.Class.UNIVERSAL,
              forge.asn1.Type.OCTETSTRING,
              false,
              macValue.getBytes()
            )
          ]
        ),
        // macSalt OCTET STRING
        forge.asn1.create(
          forge.asn1.Class.UNIVERSAL,
          forge.asn1.Type.OCTETSTRING,
          false,
          macSalt.getBytes()
        ),
        // iterations INTEGER (XXX: Only support count < 65536)
        forge.asn1.create(
          forge.asn1.Class.UNIVERSAL,
          forge.asn1.Type.INTEGER,
          false,
          forge.asn1.integerToDer(count).getBytes()
        )
      ]
    );
  }

  // PFX
  return forge.asn1.create(
    forge.asn1.Class.UNIVERSAL,
    forge.asn1.Type.SEQUENCE,
    true,
    [
      // version (3)
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.INTEGER,
        false,
        forge.asn1.integerToDer(3).getBytes()
      ),
      // PKCS#7 ContentInfo
      forge.asn1.create(
        forge.asn1.Class.UNIVERSAL,
        forge.asn1.Type.SEQUENCE,
        true,
        [
          // contentType
          forge.asn1.create(
            forge.asn1.Class.UNIVERSAL,
            forge.asn1.Type.OID,
            false,
            // OID for the content type is 'data'
            forge.asn1.oidToDer(forge.pki.oids.data).getBytes()
          ),
          // content
          forge.asn1.create(
            forge.asn1.Class.CONTEXT_SPECIFIC,
            0,
            true,
            [
              forge.asn1.create(
                forge.asn1.Class.UNIVERSAL,
                forge.asn1.Type.OCTETSTRING,
                false,
                forge.asn1.toDer(safe).getBytes()
              )
            ]
          )
        ]
      ),
      macData
    ]
  );
};

jQuery.noConflict();
jQuery(function($) {
  $.checkDomain = function(str) {
    var asterisk_counts = (str.match(/\*/g) || []).length;
    if (asterisk_counts == 0) {
      var ip_address_pattern = /\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;
      return psl.isValid(str) || ip_address_pattern.test(str);
    } else if (asterisk_counts == 1) {
      return psl.isValid(str.substr(2));
    } else if (asterisk_counts > 1) {
      return false;
    }
  };

  $(document).ready(function() {
    $('#number_rows').change(function() {
      $('#per_page').val($(this).val());
      $('#search_form').submit();
    });

    var url = window.location.pathname;
    if (url.substr(url.lastIndexOf('/') + 1, url.length) == 'generate_cert') {
      <%if @certificate_order%>
        var is_cs = '<%=@certificate_order.certificate.is_cs?%>';

        $('.own_csr').click(function() {
          if ($(this).prop('checked')) {
            if (is_cs == '') {
              $('.csr_wrap').show();
              $('.integrated_algorithm_wrap').hide();
              $('.algorithm_wrap').hide();
            } else {
              $('.csr_wrap').show();
              $('.integrated_algorithm_wrap').hide();
              $('.algorithm_wrap').hide();
            }
          } else {
            if (is_cs == '') {
              $('.csr_wrap').hide();
              $('.integrated_algorithm_wrap').show();
            } else {
              $('.csr_wrap').hide();
              $('.integrated_algorithm_wrap').show();
            }
          }
        });

        $(document).on('change', '#sign_algorithm', function(e) {
          e.preventDefault();

          if ($(this).find(':selected').text().indexOf('RSA') != -1) {
            $('.rsa_key_size').show();
            $('.ecc_key_size').hide();
          } else {
            $('.rsa_key_size').hide();
            $('.ecc_key_size').show();
          }
        });

        $(document).on('click', '.toggle_show_btn', function(e) {
          e.preventDefault();

          $('.integrated_algorithm_wrap').hide();
          $('.algorithm_wrap').show();
        });

        $(document).on('click', '.toggle_hidden_btn', function(e) {
          e.preventDefault();

          $('.algorithm_wrap').hide();
          $('.integrated_algorithm_wrap').show();
        });

        $('.generate_cert').click(function() {
          // Adding loading bar while generate CSR, Private Key and Certificate.
          var page_loader_wrap = $('<div></div>');
          page_loader_wrap.attr('class', 'page_loader_wrap');

          var page_loader = $('<div></div>');
          page_loader.attr('class', 'page_loader');

          page_loader_wrap.append(page_loader);

          window.scrollTo(0, 0);
          $('body').addClass('no_scroll_y');
          page_loader_wrap.insertBefore($('#header'));

          var account_key = '<%= @certificate_order.ssl_account.api_credential.account_key %>';
          var secret_key = '<%= @certificate_order.ssl_account.api_credential.secret_key %>';
          var ref = '<%= @certificate_order.ref %>';
          var token = '<%= @token%>';
          var api_domain = '<%=api_domain%>';

          if ($('.csr').val() != '') {
            $.ajax({
              url: api_domain + '/generate_certificate',
              data: {
                csr: $('.csr').val(),
                ref: ref,
                token: token,
                account_key: account_key,
                secret_key: secret_key
              },
              type: "POST",
              success: function (data) {
                $('.page_loader_wrap').hide();
                $('body').removeClass('no_scroll_y');

                $('.csr').attr('readonly', true);
                $('.cert').val(data.cert_results);
                $('.cert').attr('readonly', true);
                $('.cert_wrap').show();

                $('.generate_wrap').hide();
                $('.integrated_algorithm_wrap').hide();
                $('.algorithm_wrap').hide();
                $('.cert_download_wrap').show();
                $('#cert_common_name').val(data.cert_common_name);
              }
            });
          } else {
            // Extracting Common Info from Subject
            const info = {}
            var subject_dn_str = $('.cs_subject_dn').val().split(",");

            $.each(subject_dn_str, function(idx) {
              if (subject_dn_str[idx].split('=')[0] == 'CN') {
                info['commonname'] = subject_dn_str[idx].split('=')[1];
              } else if (subject_dn_str[idx].split('=')[0] == 'O') {
                info['organization'] = subject_dn_str[idx].split('=')[1];
              } else if (subject_dn_str[idx].split('=')[0] == 'OU') {
                info['organizationalunit'] = subject_dn_str[idx].split('=')[1];
              } else if (subject_dn_str[idx].split('=')[0] == 'L') {
                info['locality'] = subject_dn_str[idx].split('=')[1];
              } else if (subject_dn_str[idx].split('=')[0] == 'ST') {
                info['state'] = subject_dn_str[idx].split('=')[1];
              } else if (subject_dn_str[idx].split('=')[0] == 'C') {
                info['country'] = subject_dn_str[idx].split('=')[1];
              }
            });

            // Getting Options for generating csr and key
            /*var hash_alg = $('#hash_algorithm').find(':selected').text();*/
            var sign_alg = '';
            var key_size = '';

            if ($('.algorithm_wrap').is(':visible') && !$('.algorithm_wrap').is(':hidden')) {
              sign_alg = $('#sign_algorithm').find(':selected').val();
              if (sign_alg.indexOf('RSA') !== -1) {
                key_size = $('#rsa_key_size').find(':selected').text();
                $('.sign_alg_type').val('rsa');
              } else {
                $('.sign_alg_type').val('ecc');
                key_size = $('#ecc_key_size').find(':selected').text();
              }
            } else {
              sign_alg = $('#integrated_algorithm').find(':selected').val();
              if (sign_alg.indexOf('RSA') != -1) {
                $('.sign_alg_type').val('rsa');
                key_size = 2048;
              } else {
                $('.sign_alg_type').val('ecc');
                key_size = 384;
              }
            }

            /*var sign_alg = $('#sign_algorithm').find(':selected').text();
            var key_size = '';

            if (sign_alg.indexOf('RSA') !== -1) {
              key_size = $('#rsa_key_size').find(':selected').text();
            } else {
              key_size = $('#ecc_key_size').find(':selected').text();
            }*/

            var options = {
              digestAlgorithm: 'SHA-1',
              /*hashAlgorithm: hash_alg,*/
              signAlgorithm: sign_alg,
              keySize: key_size
            };

            // Generating CSR, Private Key and Certificate
            generateCSR(info, [], options, function(csr, pkey) {
              $('.csr').val(csr);
              $('.csr').attr('readonly', true);
              $('.csr_wrap').show();

              $('.pri_key').val(pkey);
              $('.pri_key').attr('readonly', true);
              $('.pri_key_wrap').show();

              $.ajax({
                url: api_domain + '/generate_certificate',
                data: {
                  csr: csr,
                  ref: ref,
                  token: token,
                  account_key: account_key,
                  secret_key: secret_key
                },
                type: "POST",
                success: function (data) {
                  $('.page_loader_wrap').hide();
                  $('body').removeClass('no_scroll_y');

                  $('.cert').val(data.cert_results);
                  $('.cert').attr('readonly', true);
                  $('.cert_wrap').show();

                  $('.generate_wrap').hide();
                  $('.integrated_algorithm_wrap').hide();
                  $('.algorithm_wrap').hide();
                  $('.pkcs_download_wrap').show();
                  $('#cert_common_name').val(data.cert_common_name);
                }
              });
            }, function(err) {
              var message_wrap_element = $('<div></div>');
              message_wrap_element.attr('class', 'flash_message error');

              var message_element = $('<span></span>');
              message_element.append(err);
              message_wrap_element.append(message_element);

              var btn_element = $('<small></small>');
              var close_btn_element = $('<div></div>');
              close_btn_element.attr('class', 'close_flash_message');

              var close_sign_element = $('<span></span>');
              close_sign_element.append('X');

              close_btn_element.append(close_sign_element);
              close_btn_element.append('close');

              btn_element.append(close_btn_element);
              message_wrap_element.append(btn_element);

              if ($('#content').find('.inner').children().first().hasClass('flash_message')) {
                $('#content').find('.inner').children().first().remove();
              }
              message_wrap_element.insertBefore($('#content').find('.inner').children().first());
            });
          }
        });

        $('.pkcs_download').click(function() {
          if ($('.pri_key').val() == '') {
            $('.pri_key_block').addClass('error_required');
          } else {
            $('.pri_key_block').removeClass('error_required');
            var password = $('.pkcs_password').val();

            if ($.trim(password).length > 5) {
              // Adding loading bar while generating pfx file.
              var generate_pfx_loader_wrap = $('<div></div>');
              generate_pfx_loader_wrap.attr('class', 'generate_pfx_loader_wrap');

              var generate_pfx_loader = $('<div></div>');
              generate_pfx_loader.attr('class', 'generate_pfx_loader');

              var span = $('<span></span>');
              span.append('Generating pfx file, please wait.');

              generate_pfx_loader.append(span);
              generate_pfx_loader_wrap.append(generate_pfx_loader);

              window.scrollTo(0, 0);
              $('body').addClass('no_scroll_y');
              generate_pfx_loader_wrap.insertBefore($('#header'));

              var certificates_list = $('.cert').val().split('-----BEGIN CERTIFICATE-----').filter(Boolean);
              var certs = [];
              $.each(certificates_list, function(idx, cert) {
                certs.push('-----BEGIN CERTIFICATE-----' + cert);
                /*certs.push(cert.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''));*/
              });

              /*var priKey = $('.pri_key').val().replace(/(-----(BEGIN|END) PRIVATE KEY-----|\n)/g, '');
              var pfxFileName = $('#cert_common_name').val();*/

              /*passwordBasedIntegrity(certs, priKey, password, pfxFileName, function() {
                $('.generate_pfx_loader_wrap').remove();
                $('body').removeClass('no_scroll_y');
              });*/
              /*openSSLLike(certs, priKey, password, pfxFileName, function() {
                $('.generate_pfx_loader_wrap').remove();
                $('body').removeClass('no_scroll_y');
              });*/

              if ($('.sign_alg_type').val() == 'rsa') {
                var pkeyObj = forge.pki.privateKeyFromPem($('.pri_key').val());
                var certsObj = certs.map(function(cert) {
                  return forge.pki.certificateFromPem(cert);
                });
                var pkcs12Asn1 = forge.pkcs12.toPkcs12Asn1(pkeyObj, certsObj, password, { algorithm: '3des' });
              } else {
                var pkcs12Asn1 = toPkcs12Asn1($('.pri_key').val(), certs, password, { algorithm: '3des' });
              }

              var pkcs12 = forge.asn1.toDer(pkcs12Asn1).getBytes();
              var pkcs12b64 = forge.util.encode64(pkcs12);

              pfx_download(pkcs12b64, $('#cert_common_name').val());

              $('.generate_pfx_loader_wrap').remove();
              $('body').removeClass('no_scroll_y');
            } else {
              $('.pkcs_download').prop('disabled', true);
              $('.pkcs_download').removeClass('btn-primary');
              $('.pkcs_password_block').addClass('error_require_min_length');
            }
          }
        });

        $('.cert_download').click(function() {
          cert_download($('.cert').val(), $('#cert_common_name').val());
        });

        $('.create_csr').click(function() {
          var link_url = "<%= new_managed_csr_path(@certificate_order.ssl_account.to_slug)%>?cert_token=<%= @token%>&is_server=<%= @certificate_order.certificate.is_server?%>";
          window.location.href = link_url;
        });

        $(document).on('keyup', '.pkcs_password', function(e) {
          e.preventDefault();

          if ($.trim($(this).val()).length > 5 ) {
            $('.pkcs_download').prop('disabled', false);
            $('.pkcs_download').addClass('btn-primary');
            $('.pkcs_password_block').removeClass('error_require_min_length');
          } else {
            $('.pkcs_download').prop('disabled', true);
            $('.pkcs_download').removeClass('btn-primary');
            $('.pkcs_password_block').addClass('error_require_min_length');
          }
        });
      <%end%>

      <%unless @managed_csr.blank?%>
        $('.own_csr').trigger('click');
      <%end%>
    }

    var send_notify_options = {
      dataType: 'json',
      beforeSubmit: function() {
        var notify_type = $('#notify_type').val();
        var token_url = '<%= certificate_order_tokens_path(@ssl_slug)%>';
        var request_url = '<%= request_token_certificate_order_tokens_path(@ssl_slug)%>';

        if (notify_type == 'token') {
          $(this).attr('url', token_url);
        } else {
          $(this).attr('url', request_url);
        }

        if ($('#content').find('.inner').children().first().hasClass('flash_message')) {
          $('#content').find('.inner').children().first().remove();
        }
      },
      success: function(data) {
        if (data.status == 'success') {
          if ($('#notify_type').val() == 'token') {
            if (data.act_link != 'false') {
              $('#activation_link').val(data.act_link);
              $('.epki_activation_link_modal').show();
            }

            if (data.send_email == 'true') {
              var message_wrap_element = $('<div></div>');
              message_wrap_element.attr('class', 'flash_message notice');

              var message_element = $('<span></span>');
              message_element.append('Activation link email successfully sent.');
              message_wrap_element.append(message_element);

              var btn_element = $('<small></small>');
              var close_btn_element = $('<div></div>');
              close_btn_element.attr('class', 'close_flash_message');

              var close_sign_element = $('<span></span>');
              close_sign_element.append('X');

              close_btn_element.append(close_sign_element);
              close_btn_element.append('close');

              btn_element.append(close_btn_element);
              message_wrap_element.append(btn_element);

              message_wrap_element.insertBefore($('#content').find('.inner').children().first());
            }

            if ($('[data-ref="'+ $('#certificate_order_ref').val() +'"]').attr('data-done') == 'false') {
              $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').attr('data-done', 'true');
              $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').attr('data-ori-text', $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').text());
              $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').text('activation link sent. Resend?');
            }
          } else {
            var message_wrap_element = $('<div></div>');
            message_wrap_element.attr('class', 'flash_message notice');

            var message_element = $('<span></span>');
            message_element.append('Request email successfully sent.');
            message_wrap_element.append(message_element);

            var btn_element = $('<small></small>');
            var close_btn_element = $('<div></div>');
            close_btn_element.attr('class', 'close_flash_message');

            var close_sign_element = $('<span></span>');
            close_sign_element.append('X');

            close_btn_element.append(close_sign_element);
            close_btn_element.append('close');

            btn_element.append(close_btn_element);
            message_wrap_element.append(btn_element);

            message_wrap_element.insertBefore($('#content').find('.inner').children().first());

            if ($('[data-ref="'+ $('#certificate_order_ref').val() +'"]').attr('data-done') == 'false') {
              $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').attr('data-done', 'true');
              $('[data-ref="'+ $('#certificate_order_ref').val() +'"]').text('activation request sent. Request again?');
            }
          }
        } else if (data.status == 'not_found_ssl_account') {
          var message_wrap_element = $('<div></div>');
          message_wrap_element.attr('class', 'flash_message error');

          var message_element = $('<span></span>');
          message_element.append('Team account not found. Please try again.');
          message_wrap_element.append(message_element);

          var btn_element = $('<small></small>');
          var close_btn_element = $('<div></div>');
          close_btn_element.attr('class', 'close_flash_message');

          var close_sign_element = $('<span></span>');
          close_sign_element.append('X');

          close_btn_element.append(close_sign_element);
          close_btn_element.append('close');

          btn_element.append(close_btn_element);
          message_wrap_element.append(btn_element);

          message_wrap_element.insertBefore($('#content').find('.inner').children().first());
        } else if (data.status == 'session_expired') {
          var message_wrap_element = $('<div></div>');
          message_wrap_element.attr('class', 'flash_message error');

          var message_element = $('<span></span>');
          message_element.append('The session has been expired. Please login again.');
          message_wrap_element.append(message_element);

          var btn_element = $('<small></small>');
          var close_btn_element = $('<div></div>');
          close_btn_element.attr('class', 'close_flash_message');

          var close_sign_element = $('<span></span>');
          close_sign_element.append('X');

          close_btn_element.append(close_sign_element);
          close_btn_element.append('close');

          btn_element.append(close_btn_element);
          message_wrap_element.append(btn_element);

          message_wrap_element.insertBefore($('#content').find('.inner').children().first());

          setTimeout(function() {
            location.reload(true);
          }, 500);
        }
      }
    };

    $('.link_to_send_notify').click(function(e) {
      e.preventDefault();
      var ref = $(this).attr('data-ref');
      var notify_type = $(this).attr('data-type');
      var done = $(this).attr('data-done');

      if (done == 'true') {
        if (notify_type == 'token') {
          confirmed = confirm('Are you sure you want to resend the activation link again?');
        } else {
          confirmed = confirm('Are you sure you want to resend the activation request email again?');
        }
      }

      if (done == 'false' || (done == 'true' && confirmed)) {
        $('#certificate_order_ref').val(ref);
        $('#notify_type').val(notify_type);

        if (notify_type == 'token') {
          if ($('#is_epki_admin').val() == 'true') {
            if (done == 'false') {
              $('.chk_send_label').text($(this).text().charAt(0).toUpperCase() + $(this).text().slice(1));
            } else {
              $('.chk_send_label').text($(this).attr('data-ori-text').charAt(0).toUpperCase() + $(this).attr('data-ori-text').slice(1));
            }
            $('.epki_admin_modal').show();
          } else {
            $('form#send_notify_form').ajaxSubmit(send_notify_options);
          }
        } else {
          $('form#send_notify_form').ajaxSubmit(send_notify_options);
        }
      }
    });

    $(document).on('click', '#epki_admin_modal_close', function() {
      $('#chk_send_email').prop('checked', true);
      $('#chk_copy_link').prop('checked', false);

      $('#epki_admin_modal_body').removeClass('error-required');
      $('#epki_admin_modal_footer .btn-ok').prop('disabled', false);

      $('#epki_admin_modal').hide();
    });

    $(document).on('click', '#epki_activation_link_modal_close', function() {
      $('#activation_link').val('');
      $('#epki_activation_link_modal').hide();
    });

    $(document).on('click', '.chk_method', function() {
      var check_boxes = $('.chk_method');
      var exist_checked = false;

      $.each(check_boxes, function(key, value) {
        if ($(value).prop('checked')) {
          exist_checked = true;
          return false;
        }
      });

      if (exist_checked) {
        $('#epki_admin_modal_body').removeClass('error-required');
        $('#epki_admin_modal_footer .btn-ok').prop('disabled', false);
      } else {
        $('#epki_admin_modal_body').addClass('error-required');
        $('#epki_admin_modal_footer .btn-ok').prop('disabled', true);
      }
    });

    $(document).on('click', '.btn-ok', function() {
      $('#send_email_link').val($('#chk_send_email').prop('checked'));
      $('#copy_act_link').val($('#chk_copy_link').prop('checked'));

      $('#chk_send_email').prop('checked', true);
      $('#chk_copy_link').prop('checked', false);

      $('#epki_admin_modal_body').removeClass('error-required');
      $('#epki_admin_modal_footer .btn-ok').prop('disabled', false);

      $('#epki_admin_modal').hide();

      $('form#send_notify_form').ajaxSubmit(send_notify_options);
    });

    $(document).on('click', '.btn-activation-link-ok', function() {
      $('#activation_link').val('');
      $('#epki_activation_link_modal').hide();
    });

    $(document).on('click', '.copy_activation_link', function() {
      $('#activation_link').select();
      console.log("Copied ? : " + document.execCommand('copy'));
    });

    window.onclick = function(event) {
      if (event.target == $('#epki_admin_modal')[0]) {
        $('#chk_send_email').prop('checked', true);
        $('#chk_copy_link').prop('checked', false);

        $('#epki_admin_modal_body').removeClass('error-required');
        $('#epki_admin_modal_footer .btn-ok').prop('disabled', false);

        $('#epki_admin_modal').hide();
      }

      if (event.target == $('#domain_modal')[0]) {
        $('#domain_modal').hide();
      }

      if (event.target == $('#epki_activation_link_modal')[0]) {
        $('#activation_link').val('');
        $('#epki_activation_link_modal').hide();
      }
    };

    $('#btn_cert_order_filter').click(function() {
      $('#wrap_cert_order_filter').show();
      $('#search-bar-input #search').hide();
      $('#btn_cert_order_search').hide();

      var filterItems = $('#search').val().split(/\s(?=(?:[^']|'[^']*')*$)/);
      $.each(filterItems, function(idx) {
        var filterItem = filterItems[idx];
        if (filterItem.indexOf(':') > 0) {
          var filterKey = filterItem.split(':')[0];
          var filterValue = filterItem.split(':')[1];

          $('#filter_' + filterKey + '_chk').prop('checked', true);

          if (filterKey == 'is_test') {
            return;
          }

          if (filterKey == 'expires_at' || filterKey == 'created_at' || filterKey == 'issued_at') {
            var dateStr = filterValue.split('-')[0];
            dateStr = dateStr.split('/')[2] + '-' + dateStr.split('/')[0] + '-' + dateStr.split('/')[1];
            $('#filter_' + filterKey.split('_')[0] + '_from').val(dateStr);

            if (filterValue.split('-').length > 1) {
              dateStr = filterValue.split('-')[1];
              dateStr = dateStr.split('/')[2] + '-' + dateStr.split('/')[0] + '-' + dateStr.split('/')[1];
              $('#filter_' + filterKey.split('_')[0] + '_to').val(dateStr);
            }
          } else if (filterKey == 'physical_token') {
            var tokens = filterValue.split(',');
            $.each(tokens, function(cIdx) {
              if (tokens[cIdx] == 'in_possession') {
                $('#filter_activated_chk').prop('checked', true);
              } else {
                $('#filter_' + tokens[cIdx] + '_chk').prop('checked', true);
              }
            });
          } else if (filterKey == 'strength') {
            var strengths = filterValue.split(',');
            $.each(strengths, function(cIdx) {
              if (strengths[cIdx] != '1024' && strengths[cIdx] != '2048' && strengths[cIdx] != '4096') {
                $('#filter_strength').val(strengths[cIdx]);
              } else {
                $('#filter_' + strengths[cIdx] + '_chk').prop('checked', true);
              }
            });
          } else if (filterKey == 'product' || filterKey == 'status') {
            $('#filter_' + filterKey).val(filterValue.split(','));
          } else {
            if (filterValue.charAt(0) == "'" && filterValue.charAt(filterValue.length - 1) == "'") {
              $('#filter_' + filterKey).val(filterValue.slice(1, -1));
            } else {
              $('#filter_' + filterKey).val(filterValue);
            }
          }

          var filterWrap = $('#filter_' + filterKey + '_chk').parent().parent().next().find('.filter_cont');
          filterWrap.show();
        }
      });
    });

    $('#btn_close_cert_order_filter').click(function() {
      $('#wrap_cert_order_filter').hide();
      $('#search-bar-input #search').show();
      $('#btn_cert_order_search').show();

      $('.filter_chk').prop('checked', false);
      $('.filter_cont_text').val('');
      $('.filter_cont_date').val('');
      $('#filter_product.filter_cont_slt').val([]);
      $('#filter_duration.filter_cont_slt').val([]);
      $('#filter_status.filter_cont_slt').val([]);
      $('#filter_country.filter_cont_slt').val('US');
      $('.filter_cont_chk').prop('checked', false);
      $('.filter_cont').hide();
    });

    $('#btn_cert_order_filter_search').click(function() {
      var query = '';

      $('.filter_item').each(function() {
        var isChecked = $(this).find('.filter_chk').prop('checked');

        if (isChecked) {
          if ($(this).find('.filter_chk').prop('id') == 'filter_is_test_chk') {
            query += $(this).find('.filter_chk').data('field') + ':true ';
            return;
          }

          var filterCont = $(this).find('.filter_cont');
          var val, itemQuery = '';

          if (filterCont.data('type') == 'text' || filterCont.data('type') == 'select') {
            val = filterCont.children().val().indexOf(' ') > 0 ? "'" + filterCont.children().val() + "'" : filterCont.children().val();

            if (val.trim() != '') {
              itemQuery = filterCont.children().data('field') + ':' + val;
            }
          } else if (filterCont.data('type') == 'select-multi') {
            if (filterCont.children().val()) {
              val = filterCont.children().val().toString();

              if (val.trim() != '') {
                cur_field = filterCont.children().data('field');
                cur_val = (cur_field == 'co_tags' || cur_field == 'cc_tags') ? ('\'' + val + '\'')  : val;
                itemQuery = cur_field + ':' + cur_val;
              }
            }
          } else if (filterCont.data('type') == 'date') {
            var from = filterCont.children().first().children().first().val();
            var year = '';

            if (from != '') {
              year = from.substring(0, from.indexOf('-'));
              from = from.substring(from.indexOf('-') + 1) + '-' + year;

              var to = filterCont.children().last().children().first().val();

              if (to != '') {
                year = to.substring(0, to.indexOf('-'));
                to = to.substring(to.indexOf('-') + 1) + '-' + year;
                val = from.replace(/-/g, '/') + '-' + to.replace(/-/g, '/');
              } else {
                val = from.replace(/-/g, '/');
              }

              itemQuery = filterCont.children().last().children().first().data('field') + '_at:' + val;
            }
          } else if (filterCont.data('type') == 'checkbox') {
            if (filterCont.find('#filter_in_transit_chk').prop('checked')) {
              itemQuery = filterCont.find('#filter_in_transit_chk').data('field');
            }
            if (filterCont.find('#filter_received_chk').prop('checked')) {
              itemQuery += itemQuery == '' ? '' : ',';
              itemQuery += filterCont.find('#filter_received_chk').data('field');
            }
            if (filterCont.find('#filter_activated_chk').prop('checked')) {
              itemQuery += itemQuery == '' ? '' : ',';
              itemQuery += filterCont.find('#filter_activated_chk').data('field');
            }
            if (itemQuery != '') {
              itemQuery = filterCont.data('field') + ':' + itemQuery;
            }
          } else if (filterCont.data('type') == 'mix') {
            if (filterCont.find('#filter_1024_chk').prop('checked')) {
              itemQuery = filterCont.find('#filter_1024_chk').data('field');
            }
            if (filterCont.find('#filter_2048_chk').prop('checked')) {
              itemQuery += itemQuery == '' ? '' : ',';
              itemQuery += filterCont.find('#filter_2048_chk').data('field');
            }
            if (filterCont.find('#filter_4096_chk').prop('checked')) {
              itemQuery += itemQuery == '' ? '' : ',';
              itemQuery += filterCont.find('#filter_4096_chk').data('field');
            }
            if (filterCont.find('#filter_strength').val() != '') {
              itemQuery += itemQuery == '' ? '' : ',';
              itemQuery += filterCont.find('#filter_strength').val();
            }
            if (itemQuery != '') {
              itemQuery = filterCont.data('field') + ':' + itemQuery;
            }
          }

          query += itemQuery + ' ';
        }
      });

      $('#search').val(query.trim());
      $('#search_form').submit();
    });

    $('.filter_item input[type="checkbox"]').click(function() {
      if ($(this).prop('id') == 'filter_is_test_chk') {
        return;
      }

      var isChecked = $(this).prop('checked');
      var parentSiblingNode = $(this).parent().parent().next();
      var filterItem = parentSiblingNode.find('.filter_cont');

      if (isChecked) {
        filterItem.show();
      } else {
        if ($(this).prop('id') == 'filter_created_at_chk'
          || $(this).prop('id') == 'filter_expires_at_chk'
          || $(this).prop('id') == 'filter_issued_at_chk') {
          filterItem.children().first().children().first().val('');
          filterItem.children().last().children().first().val('');
        } else if ($(this).prop('id') == 'filter_product_chk' || $(this).prop('id') == 'filter_status_chk') {
          filterItem.children().val([]);
        } else if ($(this).prop('id') == 'filter_country_chk') {
          filterItem.children().val('us');
        } else if ($(this).prop('id') == 'filter_physical_token_chk') {
          filterItem.find('.filter_cont_chk').prop('checked', false);
        } else if ($(this).prop('id') == 'filter_strength_chk') {
          filterItem.find('.filter_cont_chk').prop('checked', false);
          filterItem.find('#filter_strength').val('');
        } else {
          filterItem.children().val('');
        }

        filterItem.hide();
      }
    });

    $('.filter_cont_date').change(function() {
      var idVal = $(this).attr('id');
      var from, to = '';

      if (idVal.indexOf('from') > 0) {
        from = idVal;
        to = from.replace('from', 'to');
      } else {
        to = idVal;
        from = to.replace('to', 'from');
      }

      if ((idVal == from && $('#' + to).val() != '')
        || (idVal == to && $('#' + from).val() != '')) {
        var dateFrom = $('#' + from).val();
        var dateTo = $('#' + to).val();

        if (dateFrom > dateTo && idVal == from) {
          $('#' + from).val('');
        } else if (dateFrom > dateTo && idVal == to) {
          $('#' + to).val('');
        }
      }
    });

    $('form.create_test_order').ajaxForm({
      dataType: "json",
      beforeSubmit: function(){
        confirmed = confirm('Create Test SSL Order?');
        if(confirmed){
          $('#waiting_bar').show();
        }
        return confirmed;
      },
      success: function(data, status){
        if(data.errors){
          $('.error').html("The following fields have errors:</br><ul>");
          $.each(data.errors, function(i, item) {
            // i = index
            // item = data for a particular post
            $('.error').append("<li>"+i+": "+item.toString()+"</li>");
          });
          $('.error').append("</ul>").show();
        }
        else
          window.location.replace("<%=filter_by_scope_certificate_orders_path(@ssl_slug, 'is_test')%>");
      },
      error: function(data, status){
        if(data.errors){
          $('.error').html("The following fields have errors:</br><ul>");
          $.each(data.errors, function(i, item) {
            // i = index
            // item = data for a particular post
            $('.error').append("<li>"+i+": "+item.toString()+"</li>");
          });
          $('.error').append("</ul>").show();
        }
        else
          window.location.replace("<%=filter_by_scope_certificate_orders_path(@ssl_slug, 'is_test')%>");
      }
    });

    <%if current_user and current_user.ssl_account.is_registered_reseller?%>
      $('#next_submit').click(function(){
        if(!$('input[id$=validation]').attr('checked')){
          alert('Please click the validated checkbox to proceed with order placement.');
          return false;
        }
      });
    <%end%>
    
    function populateContact(label, data) {
      if (label=='country') {
        $("label[for='" + label + "']").siblings('select').val(data);  
      } else {
        $("label[for='" + label + "']").siblings('input').val(data);
      }
    }

    function toggleValidateRecipient() {
      status = $('#saved_contacts').find('option:selected').data('status');
      lra = $('#lra').parent('.clearfix');
      if (status && (status == 'validated')) {
        $('#lra').prop('checked', false);
        lra.hide();
      } else {
        lra.show();
      }
    }
    
    $('#saved_contacts').change(function() {
      var list = [
        ['title', 'title'],
        ['company_name', 'company_name'],
        ['department', 'department'],
        ['po_box', 'po_box'],
        ['address1', 'address1'],
        ['address2', 'address2'],
        ['address3', 'address3'],
        ['city', 'city'],
        ['state', 'state'],
        ['postal_code', 'postal_code'],
        ['country', 'country'],
        ['postal_code', 'postal_code'],
        ['email', 'email'],
        ['phone', 'phone'],
        ['first_name', 'first_name'],
        ['last_name', 'last_name'],
        ['fax', 'fax'],
        ['ext', 'ext']
      ];
      if ($(this).val()) {
        $('#save_for_later').parents('.clearfix').hide();
        $('#save_for_later').prop('checked', false);
      } else {
        $('#save_for_later').parents('.clearfix').show();
      }
      $('#saved_registrant_id').val(
        $(this).find('option:selected').attr('value')
      );
      $('#saved_registrant_status').val(
        $(this).find('option:selected').data('status')
      );
      $('#registrant_contact').attr('checked', false);
      list.forEach(function(el) {
        populateContact(el[0], $('#saved_contacts option:selected').data(el[1]));
      });
      toggleValidateRecipient();
    });
    
    $('.dropdown, .status_message, .expand, .subject_column > a').click(function(){
      var currentElmt = $(this);

      if (currentElmt.parents().filter('tr').next().hasClass('expanded') == true) {
        if (currentElmt.parents().filter('tr').next().is(":visible")) {
          currentElmt.parents().filter('tr').next().hide();
          currentElmt.parents().filter('tr').find('.dropdown img').attr('src',"<%= asset_path('expand.png') %>");
          currentElmt.parents().filter('tr').find('.expand').text('open');
        } else {
          currentElmt.parents().filter('tr').next().show();
          currentElmt.parents().filter('tr').find('.dropdown img').attr('src',"<%= asset_path('contract.png') %>");
          currentElmt.parents().filter('tr').find('.expand').text('close');
        }
      } else {
        var cert_order_ref = currentElmt.parents().filter('tr').attr('alt');
        var ajaxUrl = '<%=show_cert_order_certificate_orders_path(folders: show_folders_container?)%>';

        $.ajax({
          url: ajaxUrl,
          data: {
            id: cert_order_ref
          },
          type: "GET",
          dataType: "html",
          success: function(result) {
            if (result == 'no-user') {
              location.reload(true);
            } else {
              if (currentElmt.parents().filter('tr').next().hasClass('expanded') == false) {
                currentElmt.parents().filter('tr').after(result);
                currentElmt.parents().filter('tr').find('.dropdown img').attr('src',"<%= asset_path('contract.png') %>");
                currentElmt.parents().filter('tr').find('.expand').text('close');
              }
            }
          }
        });
      }

    });

    $('textarea[name*=body]').click(function(){
      $(this).select();
    });

    $('form[id^=edit_certificate_order] textarea').keyup(function(){
      $(this).parents().filter('form').ajaxSubmit();
    });
    
    $('#registrant_contact').change(function() {
      if(this.checked) {
        $('#first_name').val($(this).data('first-name'));
        $('#last_name').val($(this).data('last-name'));
        $('#email').val($(this).data('email'));
        $('#saved_contacts').val('');
      } else {
        $('#first_name').val(null);
        $('#last_name').val(null);
        $('#email').val(null);
      }
    });

    // Cancel button
    if (url.substr(url.lastIndexOf('/') + 1, (url.indexOf('?') != -1 ? url.indexOf('?') : url.length)) == 'edit') {
      <%if @certificate_order%>
        $('#start_over_redirect').click(function() {
          var isLockedRegistrant = '<%=params[:registrant]%>';
          if (isLockedRegistrant == 'false') {
            window.location.href = "<%= certificate_order_path(@ssl_slug, @certificate_order) %>";
          } else {
            $.ajax({
              url: "<%= start_over_certificate_order_url(@ssl_slug, @certificate_order.ref) %>",
              type: "POST",
              beforeSend: function() {
                return confirm("Are you sure you want to start over with this certificate order?");
              },
              success: function(data, status) {
                window.location.href = "<%= edit_certificate_order_path(@ssl_slug, @certificate_order.ref) %>";
              }
            });
          }
        });
      <%end%>
    }

    $('#certificate_orders').on('keyup', '#certificate_order_notes', function() {
      $(this).parents().filter('form').ajaxSubmit();
    });

    <%if current_user && current_user.is_system_admins? && @certificate_order && @certificate_order.certificate_content && @certificate_order.certificate_content.ca.blank?%>
      $(document).on('click', '.switch_from_comodo', function(e) {
        e.preventDefault();

        // Adding loading bar.
        var page_loader_wrap = $('<div></div>');
        page_loader_wrap.attr('class', 'page_loader_wrap');

        var page_loader = $('<div></div>');
        page_loader.attr('class', 'page_loader');

        page_loader_wrap.append(page_loader);

        // Showing loading bar when click switch link.
        window.scrollTo(0, 0);
        $('body').addClass('no_scroll_y');
        page_loader_wrap.insertBefore($('#header'));

        var ajax_url = "<%=switch_from_comodo_certificate_orders_path%>";
        var cert_id = "<%=@certificate_order.ref%>";

        $.ajax({
          url: ajax_url,
          data: {
            certificate_order_id: cert_id
          },
          type: "POST",
          success: function (data) {
            if (data['status'] == 'no-user') {
              location.reload(true);
            } else {
              // Removing flash message if exist.
              if ($('#content').find('.inner').children().first().hasClass('flash_message')) {
                $('#content').find('.inner').children().first().remove();
              }

              // Displaying flash message.
              var message_wrap_element = $('<div></div>')

              if (data['status'] == 'success') {
                message_wrap_element.attr('class', 'flash_message notice');
              } else if (data['status'] == 'no-exist-cert-order') {
                message_wrap_element.attr('class', 'flash_message error');
              }

              var message_element = $('<span></span>');
              if (data['status'] == 'success') {
                message_element.append('It has been switched from comodo successfully.');
              } else if (data['status'] == 'no-exist-cert-order') {
                message_element.append('It does not exist proper certificate order. Please try again.');
              }
              message_wrap_element.append(message_element);

              var btn_element = $('<small></small>');
              var close_btn_element = $('<div></div>');
              close_btn_element.attr('class', 'close_flash_message');

              var close_sign_element = $('<span></span>');
              close_sign_element.append('X');

              close_btn_element.append(close_sign_element);
              close_btn_element.append('close');

              btn_element.append(close_btn_element);
              message_wrap_element.append(btn_element);

              message_wrap_element.insertBefore($('#content').find('.inner').children().first());
            }

            $('.page_loader_wrap').hide();
            $('body').removeClass('no_scroll_y');
          }
        });
      });
    <%end%>

    $(document).on('click', '.edit_locked_registrant_domains', function(e) {
      e.preventDefault();

      $('#domain_modal_body').removeClass('error-invalid');
      $('.btn-save-domains').prop('disabled', true);
      $('#locked_reg_domains').val($('#hidden_locked_reg_domains').val());

      $('#domain_modal').show();
    });

    $(document).on('click', '#domain_modal_close', function() {
      $('#domain_modal').hide();
    });

    $(document).on('keyup', '#locked_reg_domains', function(e) {
      e.preventDefault();

      var domains_str = $(this).val();
      var is_validated = true;

      if ($.trim(domains_str) != '') {
        var domains = domains_str.split(/\s/).filter(Boolean);
        $.each(domains, function(key, value) {
          if ($.trim(value) != '' && !$.checkDomain(value)) {
            $('#domain_modal_body').addClass('error-invalid');

            is_validated = false;
            return false;
          }
        });
      }

      if (is_validated) {
        $('#domain_modal_body').removeClass('error-invalid');
        $('.btn-save-domains').prop('disabled', false);
      } else {
        $('.btn-save-domains').prop('disabled', true);
      }
    });

    $(document).on('click', '.btn-save-domains', function(e) {
      e.preventDefault();

      var domains_str = $('#locked_reg_domains').val();
      $(this).prop('disabled', true);

      $.ajax({
        url: $('.edit_locked_registrant_domains').prop('href'),
        data: {
          domains: domains_str.split(/\s/).filter(Boolean)
        },
        type: 'POST',
        success: function(data) {
          if (data['status'] == 'no-user') {
            location.reload(true);
          } else {
            $('.domains_category_domain').remove();

            $.each(domains_str.split(/\s/).filter(Boolean), function(key, value) {
              var liElement = $('<li></li>');
              liElement.attr('class', 'domains_category_domain');
              liElement.append(value);

              liElement.insertBefore($('.domains_category_action'));
            });

            $('#domain_modal').hide();

            var message_wrap_element = $('<div></div>');
            message_wrap_element.attr('class', 'flash_message notice');

            var message_element = $('<span></span>');
            message_element.append('It has been saved domains successfully.');
            message_wrap_element.append(message_element);

            var btn_element = $('<small></small>');
            var close_btn_element = $('<div></div>');
            close_btn_element.attr('class', 'close_flash_message');

            var close_sign_element = $('<span></span>');
            close_sign_element.append('X');

            close_btn_element.append(close_sign_element);
            close_btn_element.append('close');

            btn_element.append(close_btn_element);
            message_wrap_element.append(btn_element);

            if ($('#content').find('.inner').children().first().hasClass('flash_message')) {
              $('#content').find('.inner').children().first().remove();
            }
            message_wrap_element.insertBefore($('#content').find('.inner').children().first());
          }
        }
      });
    });
  });
});
</script>
