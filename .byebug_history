continue
 Assignment.where(ssdkl_account_id: id).pluck(:user_id).first
 Assignment.where(ssl_account_id: id).pluck(:user_id).first
Rails.cache.fetch("#{cache_key}/get_account_owner")
cache_key
uid
continue
User.find(1)
 Assignment.where(ssl_account_id: id).pluck(:user_id).first
 Assignment.where(ssl_account_id: id)
 Assignment.where(role_id: [Role.get_owner_id, Role.get_reseller_id], ssl_account_id: id)
id
Role.get_owner_id
cache_key
continue
target_ssl.get_account_owner
new_user
continue
contiue
User.all.count
User.all.coutn
User.all
target_user.ssl_accounts.first.get_account_owner
target_user.get_account_owner
target_user.ssl_accounts
continue
next
new_user.ssl_accounts
next
target_ssl
continue
target_user.assignments.first.ssl_account
target_user.main_ssl_account
target_ssl
continue
target_user
target_ssl
continue
target_user.ssl_account
target_user
target_ssl
continue
@owner.update_account_role(@default_ssl, Role::OWNER, Role::BILLING)
@owner.roles
continue
old_role.update(role_id: Role.get_role_id(new_role)) if old_role
old_role = assignments.where(ssl_account_id: account, role_id: 28).first
old_role.update(role_id: Role.get_role_id(new_role)) if old_role
duplicate_role?('billing', account)
old_rule = assignments.where(ssl_account_id: account, role_id: 28).first
assignments.where(ssl_account_id: account, role_id: 28).first
Role.find_by(name: old_role).id
Role.find_by(name: old_role)
assignments
new_role
old_role
continue
old_role
new_role
old_role
self.assignments
old_role
continue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
contniue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
role_name
continue
Role.find_by_name('role_name')
role_name
Role.find_by(name: role_name)
Role.find_by(name: role_name).id
role_name
continue
Role.get_role_id('owner')
@owner.get_roles_by_name('owner')
@owner.roles
continue
Role.get_role_id("owner")
ap Role.all
ap Role.all.count
Role.get_role_id("owner")
Role::OWNER
assignments.where(role_id: role_id)
role_id
continue
@owner.get_roles_by_name(Role::OWNER).count
Role.all
Role.count
Role.find_by_id(5)
Role.get_role_id(role_name)
role_name
continue
ap @owner.roles_for_account(@default_ssl)
ap @owner.roles
@owner.roles
continue
 [@owner_role, @reseller_role, @billing_role].sort
@owner.roles_for_account(@default_ssl).sort
@owner.roles.count
@owner.roles
continue
self.get_ssl_acct_user_for_approval(ssl_params)
get_ssl_acct_user_for_approval(ssl_params)
ssl_params
owner.set_approval_token(ssl_params)
next
ssl_account_user
self
continue
default_ssl
self.set_approval_token(ssl_account_id: default_ssl.id)
self.get_all_approved_accounts.ssl_account_users
self.get_all_approved_accounts
ssl_account_user
continue
ssl
self.approved_ssl_accounts
ssl
where
whereami
self.get_all_approved_accounts
self.approved_ssl_accounts.order("created_at desc")
self.approved_ssl_accounts.orde("created_at desc")
self.approved_ssl_accounts
ssl
continue
ssl
continue
ssl
continue
Assignment.where(role_id: 2)
Assignment.where(role_id: 1)
role_ids
self.assignments
self
continue
@owner.assignments
variable
variable =  @owner.create_ssl_account([owner, billing])
continue
next
account
self
id
account.id
role_ids
continue
@owner.assignments
@owner.assignments.second.role
@owner.assignments.first.role
@owner.assignments.count
@owner.roles
@owner.assignments.where(params.merge(role_id: owner.id))
quit
@owner.assignments.first.ssl_accounts
@owner.assignments
@owner.roles
continue
@owner.ssl_account
owner.ssl_account
@owner.ssl_accounts
continue
@owner.roles.count
@owner.roles
@owner
@owner.ssl_accounts.count
@owner.ssl_accounts
quit
@owner.roles
@onwer.roles
params
@owner.roles
@owner.assignments
continue
contiue
next
account && ssl_accounts.include?(account)
account && ssl_accounts.include?(account) && role_ids.count
ssl_accounts
ssl_account
account
role_ids
continue
@owner.roles.count
@owner.assignments
@default_ssl
@billing_role
@reseller_role
Role.count
@owner.roles
continue
quit
ap @owner.assignments.first.ssl_account
ap @owner.assignments.first.ssl_accounts
ap @owner.assignments.first
ap @owner.assignments.first.
ap @owner.assignments.ssl_accounts
ap @owner.assignments.count
ap @owner.assignments.cont
ap @owner.ssl_accounts
@owner.ssl_accounts.count
@owner.ssl_accounts
@owner
continue
self
User.count
self
continue
cointinue
self.errors
self.valid?
cache_key
next
team
next
ssl_account
sa.cache_key
next
#{memoized_ivar}[args]
 #{memoized_ivar}
set_cache
next
Rails.cache.fetch(team)
self
team
next
value
next
self
memoized_ivar
next
memoized_ivar
next
ssl_account
next
